#![allow(unused_variables, unused_mut, dead_code, non_camel_case_types)]
//! This file was generated by async-google-apis. (https://github.com/dermesser/async-google-apis)
//!
//! (c) 2020 Lewin Bormann <lbo@spheniscida.de>
//!
//! ## Getting started
//!
//! **Tip**: Take a look at those types ending in `...Service`. These represent API resources
//! and contain methods to interact with an API. The remaining types are used by those methods
//! and can be explored starting from a method you want to use.
//!
//! The generated code's dependencies are in the `async-google-apis-common` crate. The main
//! dependencies are hyper, yup-oauth2 (for OAuth authentication), and serde.
//!
//! I'd be happy if you let me know about your use case of this code.
//!
//! THIS FILE HAS BEEN GENERATED -- SAVE ANY MODIFICATIONS BEFORE REPLACING.

use async_google_apis_common::*;

/// Scopes of this API. Convertible to their string representation with `AsRef`.
#[derive(Debug, Clone, Copy)]
pub enum ClassroomScopes {
    /// View and manage announcements in Google Classroom
    ///
    /// URL: https://www.googleapis.com/auth/classroom.announcements
    ClassroomAnnouncements,
    /// View announcements in Google Classroom
    ///
    /// URL: https://www.googleapis.com/auth/classroom.announcements.readonly
    ClassroomAnnouncementsReadonly,
    /// See, edit, create, and permanently delete your Google Classroom classes
    ///
    /// URL: https://www.googleapis.com/auth/classroom.courses
    ClassroomCourses,
    /// View your Google Classroom classes
    ///
    /// URL: https://www.googleapis.com/auth/classroom.courses.readonly
    ClassroomCoursesReadonly,
    /// See, create and edit coursework items including assignments, questions, and grades
    ///
    /// URL: https://www.googleapis.com/auth/classroom.coursework.me
    ClassroomCourseworkMe,
    /// View your course work and grades in Google Classroom
    ///
    /// URL: https://www.googleapis.com/auth/classroom.coursework.me.readonly
    ClassroomCourseworkMeReadonly,
    /// Manage course work and grades for students in the Google Classroom classes you teach and view the course work and grades for classes you administer
    ///
    /// URL: https://www.googleapis.com/auth/classroom.coursework.students
    ClassroomCourseworkStudents,
    /// View course work and grades for students in the Google Classroom classes you teach or administer
    ///
    /// URL: https://www.googleapis.com/auth/classroom.coursework.students.readonly
    ClassroomCourseworkStudentsReadonly,
    /// See, edit, and create classwork materials in Google Classroom
    ///
    /// URL: https://www.googleapis.com/auth/classroom.courseworkmaterials
    ClassroomCourseworkmaterials,
    /// See all classwork materials for your Google Classroom classes
    ///
    /// URL: https://www.googleapis.com/auth/classroom.courseworkmaterials.readonly
    ClassroomCourseworkmaterialsReadonly,
    /// View your Google Classroom guardians
    ///
    /// URL: https://www.googleapis.com/auth/classroom.guardianlinks.me.readonly
    ClassroomGuardianlinksMeReadonly,
    /// View and manage guardians for students in your Google Classroom classes
    ///
    /// URL: https://www.googleapis.com/auth/classroom.guardianlinks.students
    ClassroomGuardianlinksStudents,
    /// View guardians for students in your Google Classroom classes
    ///
    /// URL: https://www.googleapis.com/auth/classroom.guardianlinks.students.readonly
    ClassroomGuardianlinksStudentsReadonly,
    /// View the email addresses of people in your classes
    ///
    /// URL: https://www.googleapis.com/auth/classroom.profile.emails
    ClassroomProfileEmails,
    /// View the profile photos of people in your classes
    ///
    /// URL: https://www.googleapis.com/auth/classroom.profile.photos
    ClassroomProfilePhotos,
    /// Receive notifications about your Google Classroom data
    ///
    /// URL: https://www.googleapis.com/auth/classroom.push-notifications
    ClassroomPushNotifications,
    /// Manage your Google Classroom class rosters
    ///
    /// URL: https://www.googleapis.com/auth/classroom.rosters
    ClassroomRosters,
    /// View your Google Classroom class rosters
    ///
    /// URL: https://www.googleapis.com/auth/classroom.rosters.readonly
    ClassroomRostersReadonly,
    /// View your course work and grades in Google Classroom
    ///
    /// URL: https://www.googleapis.com/auth/classroom.student-submissions.me.readonly
    ClassroomStudentSubmissionsMeReadonly,
    /// View course work and grades for students in the Google Classroom classes you teach or administer
    ///
    /// URL: https://www.googleapis.com/auth/classroom.student-submissions.students.readonly
    ClassroomStudentSubmissionsStudentsReadonly,
    /// See, create, and edit topics in Google Classroom
    ///
    /// URL: https://www.googleapis.com/auth/classroom.topics
    ClassroomTopics,
    /// View topics in Google Classroom
    ///
    /// URL: https://www.googleapis.com/auth/classroom.topics.readonly
    ClassroomTopicsReadonly,
}

impl std::convert::AsRef<str> for ClassroomScopes {
    fn as_ref(&self) -> &'static str {
        match self {
            ClassroomScopes::ClassroomAnnouncements => {
                "https://www.googleapis.com/auth/classroom.announcements"
            }
            ClassroomScopes::ClassroomAnnouncementsReadonly => {
                "https://www.googleapis.com/auth/classroom.announcements.readonly"
            }
            ClassroomScopes::ClassroomCourses => {
                "https://www.googleapis.com/auth/classroom.courses"
            }
            ClassroomScopes::ClassroomCoursesReadonly => {
                "https://www.googleapis.com/auth/classroom.courses.readonly"
            }
            ClassroomScopes::ClassroomCourseworkMe => {
                "https://www.googleapis.com/auth/classroom.coursework.me"
            }
            ClassroomScopes::ClassroomCourseworkMeReadonly => {
                "https://www.googleapis.com/auth/classroom.coursework.me.readonly"
            }
            ClassroomScopes::ClassroomCourseworkStudents => {
                "https://www.googleapis.com/auth/classroom.coursework.students"
            }
            ClassroomScopes::ClassroomCourseworkStudentsReadonly => {
                "https://www.googleapis.com/auth/classroom.coursework.students.readonly"
            }
            ClassroomScopes::ClassroomCourseworkmaterials => {
                "https://www.googleapis.com/auth/classroom.courseworkmaterials"
            }
            ClassroomScopes::ClassroomCourseworkmaterialsReadonly => {
                "https://www.googleapis.com/auth/classroom.courseworkmaterials.readonly"
            }
            ClassroomScopes::ClassroomGuardianlinksMeReadonly => {
                "https://www.googleapis.com/auth/classroom.guardianlinks.me.readonly"
            }
            ClassroomScopes::ClassroomGuardianlinksStudents => {
                "https://www.googleapis.com/auth/classroom.guardianlinks.students"
            }
            ClassroomScopes::ClassroomGuardianlinksStudentsReadonly => {
                "https://www.googleapis.com/auth/classroom.guardianlinks.students.readonly"
            }
            ClassroomScopes::ClassroomProfileEmails => {
                "https://www.googleapis.com/auth/classroom.profile.emails"
            }
            ClassroomScopes::ClassroomProfilePhotos => {
                "https://www.googleapis.com/auth/classroom.profile.photos"
            }
            ClassroomScopes::ClassroomPushNotifications => {
                "https://www.googleapis.com/auth/classroom.push-notifications"
            }
            ClassroomScopes::ClassroomRosters => {
                "https://www.googleapis.com/auth/classroom.rosters"
            }
            ClassroomScopes::ClassroomRostersReadonly => {
                "https://www.googleapis.com/auth/classroom.rosters.readonly"
            }
            ClassroomScopes::ClassroomStudentSubmissionsMeReadonly => {
                "https://www.googleapis.com/auth/classroom.student-submissions.me.readonly"
            }
            ClassroomScopes::ClassroomStudentSubmissionsStudentsReadonly => {
                "https://www.googleapis.com/auth/classroom.student-submissions.students.readonly"
            }
            ClassroomScopes::ClassroomTopics => "https://www.googleapis.com/auth/classroom.topics",
            ClassroomScopes::ClassroomTopicsReadonly => {
                "https://www.googleapis.com/auth/classroom.topics.readonly"
            }
        }
    }
}

/// Announcement created by a teacher for students of the course
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct Announcement {
    /// Absolute link to this announcement in the Classroom web UI. This is only populated if `state` is `PUBLISHED`. Read-only.
    #[serde(rename = "alternateLink")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub alternate_link: Option<String>,
    /// Assignee mode of the announcement. If unspecified, the default value is `ALL_STUDENTS`.
    #[serde(rename = "assigneeMode")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub assignee_mode: Option<AnnouncementAssigneeMode>,
    /// Identifier of the course. Read-only.
    #[serde(rename = "courseId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub course_id: Option<String>,
    /// Timestamp when this announcement was created. Read-only.
    #[serde(rename = "creationTime")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub creation_time: Option<String>,
    /// Identifier for the user that created the announcement. Read-only.
    #[serde(rename = "creatorUserId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub creator_user_id: Option<String>,
    /// Classroom-assigned identifier of this announcement, unique per course. Read-only.
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "individualStudentsOptions")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub individual_students_options: Option<IndividualStudentsOptions>,
    /// Additional materials. Announcements must have no more than 20 material items.
    #[serde(rename = "materials")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub materials: Option<Vec<Material>>,
    /// Optional timestamp when this announcement is scheduled to be published.
    #[serde(rename = "scheduledTime")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub scheduled_time: Option<String>,
    /// Status of this announcement. If unspecified, the default state is `DRAFT`.
    #[serde(rename = "state")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub state: Option<AnnouncementState>,
    /// Description of this announcement. The text must be a valid UTF-8 string containing no more than 30,000 characters.
    #[serde(rename = "text")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    /// Timestamp of the most recent change to this announcement. Read-only.
    #[serde(rename = "updateTime")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub update_time: Option<String>,
}

/// Additional details for assignments.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct Assignment {
    #[serde(rename = "studentWorkFolder")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub student_work_folder: Option<DriveFolder>,
}

/// Student work for an assignment.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct AssignmentSubmission {
    /// Attachments added by the student. Drive files that correspond to materials with a share mode of STUDENT_COPY may not exist yet if the student has not accessed the assignment in Classroom. Some attachment metadata is only populated if the requesting user has permission to access it. Identifier and alternate_link fields are always available, but others (for example, title) may not be.
    #[serde(rename = "attachments")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub attachments: Option<Vec<Attachment>>,
}

/// Attachment added to student assignment work. When creating attachments, setting the `form` field is not supported.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct Attachment {
    #[serde(rename = "driveFile")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub drive_file: Option<DriveFile>,
    #[serde(rename = "form")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub form: Option<Form>,
    #[serde(rename = "link")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub link: Option<Link>,
    #[serde(rename = "youTubeVideo")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub you_tube_video: Option<YouTubeVideo>,
}

/// A reference to a Cloud Pub/Sub topic. To register for notifications, the owner of the topic must grant `classroom-notifications@system.gserviceaccount.com` the `projects.topics.publish` permission.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CloudPubsubTopic {
    /// The `name` field of a Cloud Pub/Sub [Topic](https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.topics#Topic).
    #[serde(rename = "topicName")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub topic_name: Option<String>,
}

/// A Course in Classroom.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct Course {
    /// Absolute link to this course in the Classroom web UI. Read-only.
    #[serde(rename = "alternateLink")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub alternate_link: Option<String>,
    /// The Calendar ID for a calendar that all course members can see, to which Classroom adds events for course work and announcements in the course. The Calendar for a course is created asynchronously when the course is set to `CourseState.ACTIVE` for the first time (at creation time or when it is updated to `ACTIVE` through the UI or the API). The Calendar ID will not be populated until the creation process is completed. Read-only.
    #[serde(rename = "calendarId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub calendar_id: Option<String>,
    /// The email address of a Google group containing all members of the course. This group does not accept email and can only be used for permissions. Read-only.
    #[serde(rename = "courseGroupEmail")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub course_group_email: Option<String>,
    /// Sets of materials that appear on the "about" page of this course. Read-only.
    #[serde(rename = "courseMaterialSets")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub course_material_sets: Option<Vec<CourseMaterialSet>>,
    /// State of the course. If unspecified, the default state is `PROVISIONED`.
    #[serde(rename = "courseState")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub course_state: Option<CourseCourseState>,
    /// Creation time of the course. Specifying this field in a course update mask results in an error. Read-only.
    #[serde(rename = "creationTime")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub creation_time: Option<String>,
    /// Optional description. For example, "We'll be learning about the structure of living creatures from a combination of textbooks, guest lectures, and lab work. Expect to be excited!" If set, this field must be a valid UTF-8 string and no longer than 30,000 characters.
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Optional heading for the description. For example, "Welcome to 10th Grade Biology." If set, this field must be a valid UTF-8 string and no longer than 3600 characters.
    #[serde(rename = "descriptionHeading")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description_heading: Option<String>,
    /// Enrollment code to use when joining this course. Specifying this field in a course update mask results in an error. Read-only.
    #[serde(rename = "enrollmentCode")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub enrollment_code: Option<String>,
    #[serde(rename = "gradebookSettings")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub gradebook_settings: Option<GradebookSettings>,
    /// Whether or not guardian notifications are enabled for this course. Read-only.
    #[serde(rename = "guardiansEnabled")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub guardians_enabled: Option<bool>,
    /// Identifier for this course assigned by Classroom. When creating a course, you may optionally set this identifier to an alias string in the request to create a corresponding alias. The `id` is still assigned by Classroom and cannot be updated after the course is created. Specifying this field in a course update mask results in an error.
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Name of the course. For example, "10th Grade Biology". The name is required. It must be between 1 and 750 characters and a valid UTF-8 string.
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The identifier of the owner of a course. When specified as a parameter of a create course request, this field is required. The identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user This must be set in a create request. Admins can also specify this field in a patch course request to transfer ownership. In other contexts, it is read-only.
    #[serde(rename = "ownerId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub owner_id: Option<String>,
    /// Optional room location. For example, "301". If set, this field must be a valid UTF-8 string and no longer than 650 characters.
    #[serde(rename = "room")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub room: Option<String>,
    /// Section of the course. For example, "Period 2". If set, this field must be a valid UTF-8 string and no longer than 2800 characters.
    #[serde(rename = "section")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub section: Option<String>,
    #[serde(rename = "teacherFolder")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub teacher_folder: Option<DriveFolder>,
    /// The email address of a Google group containing all teachers of the course. This group does not accept email and can only be used for permissions. Read-only.
    #[serde(rename = "teacherGroupEmail")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub teacher_group_email: Option<String>,
    /// Time of the most recent update to this course. Specifying this field in a course update mask results in an error. Read-only.
    #[serde(rename = "updateTime")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub update_time: Option<String>,
}

/// Alternative identifier for a course. An alias uniquely identifies a course. It must be unique within one of the following scopes: * domain: A domain-scoped alias is visible to all users within the alias creator's domain and can be created only by a domain admin. A domain-scoped alias is often used when a course has an identifier external to Classroom. * project: A project-scoped alias is visible to any request from an application using the Developer Console project ID that created the alias and can be created by any project. A project-scoped alias is often used when an application has alternative identifiers. A random value can also be used to avoid duplicate courses in the event of transmission failures, as retrying a request will return `ALREADY_EXISTS` if a previous one has succeeded.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CourseAlias {
    /// Alias string. The format of the string indicates the desired alias scoping. * `d:` indicates a domain-scoped alias. Example: `d:math_101` * `p:` indicates a project-scoped alias. Example: `p:abc123` This field has a maximum length of 256 characters.
    #[serde(rename = "alias")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub alias: Option<String>,
}

/// A material attached to a course as part of a material set.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CourseMaterial {
    #[serde(rename = "driveFile")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub drive_file: Option<DriveFile>,
    #[serde(rename = "form")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub form: Option<Form>,
    #[serde(rename = "link")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub link: Option<Link>,
    #[serde(rename = "youTubeVideo")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub you_tube_video: Option<YouTubeVideo>,
}

/// A set of materials that appears on the "About" page of the course. These materials might include a syllabus, schedule, or other background information relating to the course as a whole.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CourseMaterialSet {
    /// Materials attached to this set.
    #[serde(rename = "materials")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub materials: Option<Vec<CourseMaterial>>,
    /// Title for this set.
    #[serde(rename = "title")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}

/// Information about a `Feed` with a `feed_type` of `COURSE_ROSTER_CHANGES`.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CourseRosterChangesInfo {
    /// The `course_id` of the course to subscribe to roster changes for.
    #[serde(rename = "courseId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub course_id: Option<String>,
}

/// Course work created by a teacher for students of the course.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CourseWork {
    /// Absolute link to this course work in the Classroom web UI. This is only populated if `state` is `PUBLISHED`. Read-only.
    #[serde(rename = "alternateLink")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub alternate_link: Option<String>,
    /// Assignee mode of the coursework. If unspecified, the default value is `ALL_STUDENTS`.
    #[serde(rename = "assigneeMode")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub assignee_mode: Option<CourseWorkAssigneeMode>,
    #[serde(rename = "assignment")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub assignment: Option<Assignment>,
    /// Whether this course work item is associated with the Developer Console project making the request. See CreateCourseWork for more details. Read-only.
    #[serde(rename = "associatedWithDeveloper")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub associated_with_developer: Option<bool>,
    /// Identifier of the course. Read-only.
    #[serde(rename = "courseId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub course_id: Option<String>,
    /// Timestamp when this course work was created. Read-only.
    #[serde(rename = "creationTime")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub creation_time: Option<String>,
    /// Identifier for the user that created the coursework. Read-only.
    #[serde(rename = "creatorUserId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub creator_user_id: Option<String>,
    /// Optional description of this course work. If set, the description must be a valid UTF-8 string containing no more than 30,000 characters.
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "dueDate")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub due_date: Option<Date>,
    #[serde(rename = "dueTime")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub due_time: Option<TimeOfDay>,
    #[serde(rename = "gradeCategory")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub grade_category: Option<GradeCategory>,
    /// Classroom-assigned identifier of this course work, unique per course. Read-only.
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "individualStudentsOptions")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub individual_students_options: Option<IndividualStudentsOptions>,
    /// Additional materials. CourseWork must have no more than 20 material items.
    #[serde(rename = "materials")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub materials: Option<Vec<Material>>,
    /// Maximum grade for this course work. If zero or unspecified, this assignment is considered ungraded. This must be a non-negative integer value.
    #[serde(rename = "maxPoints")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub max_points: Option<f64>,
    #[serde(rename = "multipleChoiceQuestion")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub multiple_choice_question: Option<MultipleChoiceQuestion>,
    /// Optional timestamp when this course work is scheduled to be published.
    #[serde(rename = "scheduledTime")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub scheduled_time: Option<String>,
    /// Status of this course work. If unspecified, the default state is `DRAFT`.
    #[serde(rename = "state")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub state: Option<CourseWorkState>,
    /// Setting to determine when students are allowed to modify submissions. If unspecified, the default value is `MODIFIABLE_UNTIL_TURNED_IN`.
    #[serde(rename = "submissionModificationMode")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub submission_modification_mode: Option<CourseWorkSubmissionModificationMode>,
    /// Title of this course work. The title must be a valid UTF-8 string containing between 1 and 3000 characters.
    #[serde(rename = "title")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// Identifier for the topic that this coursework is associated with. Must match an existing topic in the course.
    #[serde(rename = "topicId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub topic_id: Option<String>,
    /// Timestamp of the most recent change to this course work. Read-only.
    #[serde(rename = "updateTime")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub update_time: Option<String>,
    /// Type of this course work. The type is set when the course work is created and cannot be changed.
    #[serde(rename = "workType")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub work_type: Option<CourseWorkWorkType>,
}

/// Information about a `Feed` with a `feed_type` of `COURSE_WORK_CHANGES`.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CourseWorkChangesInfo {
    /// The `course_id` of the course to subscribe to work changes for.
    #[serde(rename = "courseId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub course_id: Option<String>,
}

/// Course work material created by a teacher for students of the course
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CourseWorkMaterial {
    /// Absolute link to this course work material in the Classroom web UI. This is only populated if `state` is `PUBLISHED`. Read-only.
    #[serde(rename = "alternateLink")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub alternate_link: Option<String>,
    /// Assignee mode of the course work material. If unspecified, the default value is `ALL_STUDENTS`.
    #[serde(rename = "assigneeMode")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub assignee_mode: Option<CourseWorkMaterialAssigneeMode>,
    /// Identifier of the course. Read-only.
    #[serde(rename = "courseId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub course_id: Option<String>,
    /// Timestamp when this course work material was created. Read-only.
    #[serde(rename = "creationTime")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub creation_time: Option<String>,
    /// Identifier for the user that created the course work material. Read-only.
    #[serde(rename = "creatorUserId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub creator_user_id: Option<String>,
    /// Optional description of this course work material. The text must be a valid UTF-8 string containing no more than 30,000 characters.
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Classroom-assigned identifier of this course work material, unique per course. Read-only.
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "individualStudentsOptions")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub individual_students_options: Option<IndividualStudentsOptions>,
    /// Additional materials. A course work material must have no more than 20 material items.
    #[serde(rename = "materials")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub materials: Option<Vec<Material>>,
    /// Optional timestamp when this course work material is scheduled to be published.
    #[serde(rename = "scheduledTime")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub scheduled_time: Option<String>,
    /// Status of this course work material. If unspecified, the default state is `DRAFT`.
    #[serde(rename = "state")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub state: Option<CourseWorkMaterialState>,
    /// Title of this course work material. The title must be a valid UTF-8 string containing between 1 and 3000 characters.
    #[serde(rename = "title")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// Identifier for the topic that this course work material is associated with. Must match an existing topic in the course.
    #[serde(rename = "topicId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub topic_id: Option<String>,
    /// Timestamp of the most recent change to this course work material. Read-only.
    #[serde(rename = "updateTime")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub update_time: Option<String>,
}

/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct Date {
    /// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
    #[serde(rename = "day")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub day: Option<i32>,
    /// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
    #[serde(rename = "month")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub month: Option<i32>,
    /// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
    #[serde(rename = "year")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub year: Option<i32>,
}

/// Representation of a Google Drive file.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct DriveFile {
    /// URL that can be used to access the Drive item. Read-only.
    #[serde(rename = "alternateLink")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub alternate_link: Option<String>,
    /// Drive API resource ID.
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// URL of a thumbnail image of the Drive item. Read-only.
    #[serde(rename = "thumbnailUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub thumbnail_url: Option<String>,
    /// Title of the Drive item. Read-only.
    #[serde(rename = "title")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}

/// Representation of a Google Drive folder.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct DriveFolder {
    /// URL that can be used to access the Drive folder. Read-only.
    #[serde(rename = "alternateLink")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub alternate_link: Option<String>,
    /// Drive API resource ID.
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Title of the Drive folder. Read-only.
    #[serde(rename = "title")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}

/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct Empty {}

/// A class of notifications that an application can register to receive. For example: "all roster changes for a domain".
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct Feed {
    #[serde(rename = "courseRosterChangesInfo")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub course_roster_changes_info: Option<CourseRosterChangesInfo>,
    #[serde(rename = "courseWorkChangesInfo")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub course_work_changes_info: Option<CourseWorkChangesInfo>,
    /// The type of feed.
    #[serde(rename = "feedType")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub feed_type: Option<FeedFeedType>,
}

/// Google Forms item.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct Form {
    /// URL of the form.
    #[serde(rename = "formUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub form_url: Option<String>,
    /// URL of the form responses document. Only set if responses have been recorded and only when the requesting user is an editor of the form. Read-only.
    #[serde(rename = "responseUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub response_url: Option<String>,
    /// URL of a thumbnail image of the Form. Read-only.
    #[serde(rename = "thumbnailUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub thumbnail_url: Option<String>,
    /// Title of the Form. Read-only.
    #[serde(rename = "title")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}

/// Global user permission description.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct GlobalPermission {
    /// Permission value.
    #[serde(rename = "permission")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub permission: Option<GlobalPermissionPermission>,
}

/// Details for a grade category in a course. Coursework may have zero or one grade category, and the category may be used in computing the overall grade. See the [help center article](https://support.google.com/edu/classroom/answer/9184995) for details.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct GradeCategory {
    /// Default value of denominator. Only applicable when grade calculation type is TOTAL_POINTS.
    #[serde(rename = "defaultGradeDenominator")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub default_grade_denominator: Option<i32>,
    /// ID of the grade category.
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Name of the grade category.
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The weight of the category average as part of overall average. A weight of 12.34% is represented as 123400 (100% is 1,000,000). The last two digits should always be zero since we use two decimal precision. Only applicable when grade calculation type is WEIGHTED_CATEGORIES.
    #[serde(rename = "weight")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub weight: Option<i32>,
}

/// The history of each grade on this submission.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct GradeHistory {
    /// The teacher who made the grade change.
    #[serde(rename = "actorUserId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub actor_user_id: Option<String>,
    /// The type of grade change at this time in the submission grade history.
    #[serde(rename = "gradeChangeType")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub grade_change_type: Option<GradeHistoryGradeChangeType>,
    /// When the grade of the submission was changed.
    #[serde(rename = "gradeTimestamp")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub grade_timestamp: Option<String>,
    /// The denominator of the grade at this time in the submission grade history.
    #[serde(rename = "maxPoints")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub max_points: Option<f64>,
    /// The numerator of the grade at this time in the submission grade history.
    #[serde(rename = "pointsEarned")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub points_earned: Option<f64>,
}

/// The gradebook settings for a course. See the [help center article](https://support.google.com/edu/classroom/answer/9184995) for details.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct GradebookSettings {
    /// Indicates how the overall grade is calculated.
    #[serde(rename = "calculationType")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub calculation_type: Option<GradebookSettingsCalculationType>,
    /// Indicates who can see the overall grade..
    #[serde(rename = "displaySetting")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub display_setting: Option<GradebookSettingsDisplaySetting>,
    /// Grade categories that are available for coursework in the course.
    #[serde(rename = "gradeCategories")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub grade_categories: Option<Vec<GradeCategory>>,
}

/// Association between a student and a guardian of that student. The guardian may receive information about the student's course work.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct Guardian {
    /// Identifier for the guardian.
    #[serde(rename = "guardianId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub guardian_id: Option<String>,
    #[serde(rename = "guardianProfile")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub guardian_profile: Option<UserProfile>,
    /// The email address to which the initial guardian invitation was sent. This field is only visible to domain administrators.
    #[serde(rename = "invitedEmailAddress")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub invited_email_address: Option<String>,
    /// Identifier for the student to whom the guardian relationship applies.
    #[serde(rename = "studentId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub student_id: Option<String>,
}

/// An invitation to become the guardian of a specified user, sent to a specified email address.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct GuardianInvitation {
    /// The time that this invitation was created. Read-only.
    #[serde(rename = "creationTime")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub creation_time: Option<String>,
    /// Unique identifier for this invitation. Read-only.
    #[serde(rename = "invitationId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub invitation_id: Option<String>,
    /// Email address that the invitation was sent to. This field is only visible to domain administrators.
    #[serde(rename = "invitedEmailAddress")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub invited_email_address: Option<String>,
    /// The state that this invitation is in.
    #[serde(rename = "state")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub state: Option<GuardianInvitationState>,
    /// ID of the student (in standard format)
    #[serde(rename = "studentId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub student_id: Option<String>,
}

/// Assignee details about a coursework/announcement. This field is set if and only if `assigneeMode` is `INDIVIDUAL_STUDENTS`.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct IndividualStudentsOptions {
    /// Identifiers for the students that have access to the coursework/announcement.
    #[serde(rename = "studentIds")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub student_ids: Option<Vec<String>>,
}

/// An invitation to join a course.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct Invitation {
    /// Identifier of the course to invite the user to.
    #[serde(rename = "courseId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub course_id: Option<String>,
    /// Identifier assigned by Classroom. Read-only.
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Role to invite the user to have. Must not be `COURSE_ROLE_UNSPECIFIED`.
    #[serde(rename = "role")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub role: Option<InvitationRole>,
    /// Identifier of the invited user. When specified as a parameter of a request, this identifier can be set to one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user
    #[serde(rename = "userId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
}

/// URL item.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct Link {
    /// URL of a thumbnail image of the target URL. Read-only.
    #[serde(rename = "thumbnailUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub thumbnail_url: Option<String>,
    /// Title of the target of the URL. Read-only.
    #[serde(rename = "title")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// URL to link to. This must be a valid UTF-8 string containing between 1 and 2024 characters.
    #[serde(rename = "url")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

/// Response when listing course work.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ListAnnouncementsResponse {
    /// Announcement items that match the request.
    #[serde(rename = "announcements")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub announcements: Option<Vec<Announcement>>,
    /// Token identifying the next page of results to return. If empty, no further results are available.
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub next_page_token: Option<String>,
}

/// Response when listing course aliases.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ListCourseAliasesResponse {
    /// The course aliases.
    #[serde(rename = "aliases")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub aliases: Option<Vec<CourseAlias>>,
    /// Token identifying the next page of results to return. If empty, no further results are available.
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub next_page_token: Option<String>,
}

/// Response when listing course work material.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ListCourseWorkMaterialResponse {
    /// Course work material items that match the request.
    #[serde(rename = "courseWorkMaterial")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub course_work_material: Option<Vec<CourseWorkMaterial>>,
    /// Token identifying the next page of results to return. If empty, no further results are available.
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub next_page_token: Option<String>,
}

/// Response when listing course work.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ListCourseWorkResponse {
    /// Course work items that match the request.
    #[serde(rename = "courseWork")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub course_work: Option<Vec<CourseWork>>,
    /// Token identifying the next page of results to return. If empty, no further results are available.
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub next_page_token: Option<String>,
}

/// Response when listing courses.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ListCoursesResponse {
    /// Courses that match the list request.
    #[serde(rename = "courses")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub courses: Option<Vec<Course>>,
    /// Token identifying the next page of results to return. If empty, no further results are available.
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub next_page_token: Option<String>,
}

/// Response when listing guardian invitations.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ListGuardianInvitationsResponse {
    /// Guardian invitations that matched the list request.
    #[serde(rename = "guardianInvitations")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub guardian_invitations: Option<Vec<GuardianInvitation>>,
    /// Token identifying the next page of results to return. If empty, no further results are available.
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub next_page_token: Option<String>,
}

/// Response when listing guardians.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ListGuardiansResponse {
    /// Guardians on this page of results that met the criteria specified in the request.
    #[serde(rename = "guardians")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub guardians: Option<Vec<Guardian>>,
    /// Token identifying the next page of results to return. If empty, no further results are available.
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub next_page_token: Option<String>,
}

/// Response when listing invitations.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ListInvitationsResponse {
    /// Invitations that match the list request.
    #[serde(rename = "invitations")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub invitations: Option<Vec<Invitation>>,
    /// Token identifying the next page of results to return. If empty, no further results are available.
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub next_page_token: Option<String>,
}

/// Response when listing student submissions.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ListStudentSubmissionsResponse {
    /// Token identifying the next page of results to return. If empty, no further results are available.
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub next_page_token: Option<String>,
    /// Student work that matches the request.
    #[serde(rename = "studentSubmissions")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub student_submissions: Option<Vec<StudentSubmission>>,
}

/// Response when listing students.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ListStudentsResponse {
    /// Token identifying the next page of results to return. If empty, no further results are available.
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub next_page_token: Option<String>,
    /// Students who match the list request.
    #[serde(rename = "students")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub students: Option<Vec<Student>>,
}

/// Response when listing teachers.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ListTeachersResponse {
    /// Token identifying the next page of results to return. If empty, no further results are available.
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub next_page_token: Option<String>,
    /// Teachers who match the list request.
    #[serde(rename = "teachers")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub teachers: Option<Vec<Teacher>>,
}

/// Response when listing topics.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ListTopicResponse {
    /// Token identifying the next page of results to return. If empty, no further results are available.
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub next_page_token: Option<String>,
    /// Topic items that match the request.
    #[serde(rename = "topic")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub topic: Option<Vec<Topic>>,
}

/// Material attached to course work. When creating attachments, setting the `form` field is not supported.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct Material {
    #[serde(rename = "driveFile")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub drive_file: Option<SharedDriveFile>,
    #[serde(rename = "form")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub form: Option<Form>,
    #[serde(rename = "link")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub link: Option<Link>,
    #[serde(rename = "youtubeVideo")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub youtube_video: Option<YouTubeVideo>,
}

/// Request to modify assignee mode and options of an announcement.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ModifyAnnouncementAssigneesRequest {
    /// Mode of the announcement describing whether it is accessible by all students or specified individual students.
    #[serde(rename = "assigneeMode")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub assignee_mode: Option<ModifyAnnouncementAssigneesRequestAssigneeMode>,
    #[serde(rename = "modifyIndividualStudentsOptions")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub modify_individual_students_options: Option<ModifyIndividualStudentsOptions>,
}

/// Request to modify the attachments of a student submission.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ModifyAttachmentsRequest {
    /// Attachments to add. A student submission may not have more than 20 attachments. Form attachments are not supported.
    #[serde(rename = "addAttachments")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub add_attachments: Option<Vec<Attachment>>,
}

/// Request to modify assignee mode and options of a coursework.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ModifyCourseWorkAssigneesRequest {
    /// Mode of the coursework describing whether it will be assigned to all students or specified individual students.
    #[serde(rename = "assigneeMode")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub assignee_mode: Option<ModifyCourseWorkAssigneesRequestAssigneeMode>,
    #[serde(rename = "modifyIndividualStudentsOptions")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub modify_individual_students_options: Option<ModifyIndividualStudentsOptions>,
}

/// Contains fields to add or remove students from a course work or announcement where the `assigneeMode` is set to `INDIVIDUAL_STUDENTS`.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ModifyIndividualStudentsOptions {
    /// IDs of students to be added as having access to this coursework/announcement.
    #[serde(rename = "addStudentIds")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub add_student_ids: Option<Vec<String>>,
    /// IDs of students to be removed from having access to this coursework/announcement.
    #[serde(rename = "removeStudentIds")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub remove_student_ids: Option<Vec<String>>,
}

/// Additional details for multiple-choice questions.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct MultipleChoiceQuestion {
    /// Possible choices.
    #[serde(rename = "choices")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub choices: Option<Vec<String>>,
}

/// Student work for a multiple-choice question.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct MultipleChoiceSubmission {
    /// Student's select choice.
    #[serde(rename = "answer")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub answer: Option<String>,
}

/// Details of the user's name.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct Name {
    /// The user's last name. Read-only.
    #[serde(rename = "familyName")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub family_name: Option<String>,
    /// The user's full name formed by concatenating the first and last name values. Read-only.
    #[serde(rename = "fullName")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub full_name: Option<String>,
    /// The user's first name. Read-only.
    #[serde(rename = "givenName")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub given_name: Option<String>,
}

/// Request to reclaim a student submission.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ReclaimStudentSubmissionRequest {}

/// An instruction to Classroom to send notifications from the `feed` to the provided destination.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct Registration {
    #[serde(rename = "cloudPubsubTopic")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub cloud_pubsub_topic: Option<CloudPubsubTopic>,
    /// The time until which the `Registration` is effective. This is a read-only field assigned by the server.
    #[serde(rename = "expiryTime")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expiry_time: Option<String>,
    #[serde(rename = "feed")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub feed: Option<Feed>,
    /// A server-generated unique identifier for this `Registration`. Read-only.
    #[serde(rename = "registrationId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub registration_id: Option<String>,
}

/// Request to return a student submission.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ReturnStudentSubmissionRequest {}

/// Drive file that is used as material for course work.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct SharedDriveFile {
    #[serde(rename = "driveFile")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub drive_file: Option<DriveFile>,
    /// Mechanism by which students access the Drive item.
    #[serde(rename = "shareMode")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub share_mode: Option<SharedDriveFileShareMode>,
}

/// Student work for a short answer question.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ShortAnswerSubmission {
    /// Student response to a short-answer question.
    #[serde(rename = "answer")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub answer: Option<String>,
}

/// The history of each state this submission has been in.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct StateHistory {
    /// The teacher or student who made the change.
    #[serde(rename = "actorUserId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub actor_user_id: Option<String>,
    /// The workflow pipeline stage.
    #[serde(rename = "state")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub state: Option<StateHistoryState>,
    /// When the submission entered this state.
    #[serde(rename = "stateTimestamp")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub state_timestamp: Option<String>,
}

/// Student in a course.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct Student {
    /// Identifier of the course. Read-only.
    #[serde(rename = "courseId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub course_id: Option<String>,
    #[serde(rename = "profile")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub profile: Option<UserProfile>,
    #[serde(rename = "studentWorkFolder")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub student_work_folder: Option<DriveFolder>,
    /// Identifier of the user. When specified as a parameter of a request, this identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user
    #[serde(rename = "userId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
}

/// Student submission for course work. StudentSubmission items are generated when a CourseWork item is created. StudentSubmissions that have never been accessed (i.e. with `state` = NEW) may not have a creation time or update time.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct StudentSubmission {
    /// Absolute link to the submission in the Classroom web UI. Read-only.
    #[serde(rename = "alternateLink")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub alternate_link: Option<String>,
    /// Optional grade. If unset, no grade was set. This value must be non-negative. Decimal (that is, non-integer) values are allowed, but are rounded to two decimal places. This may be modified only by course teachers.
    #[serde(rename = "assignedGrade")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub assigned_grade: Option<f64>,
    #[serde(rename = "assignmentSubmission")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub assignment_submission: Option<AssignmentSubmission>,
    /// Whether this student submission is associated with the Developer Console project making the request. See CreateCourseWork for more details. Read-only.
    #[serde(rename = "associatedWithDeveloper")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub associated_with_developer: Option<bool>,
    /// Identifier of the course. Read-only.
    #[serde(rename = "courseId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub course_id: Option<String>,
    /// Identifier for the course work this corresponds to. Read-only.
    #[serde(rename = "courseWorkId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub course_work_id: Option<String>,
    /// Type of course work this submission is for. Read-only.
    #[serde(rename = "courseWorkType")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub course_work_type: Option<StudentSubmissionCourseWorkType>,
    /// Creation time of this submission. This may be unset if the student has not accessed this item. Read-only.
    #[serde(rename = "creationTime")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub creation_time: Option<String>,
    /// Optional pending grade. If unset, no grade was set. This value must be non-negative. Decimal (that is, non-integer) values are allowed, but are rounded to two decimal places. This is only visible to and modifiable by course teachers.
    #[serde(rename = "draftGrade")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub draft_grade: Option<f64>,
    /// Classroom-assigned Identifier for the student submission. This is unique among submissions for the relevant course work. Read-only.
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Whether this submission is late. Read-only.
    #[serde(rename = "late")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub late: Option<bool>,
    #[serde(rename = "multipleChoiceSubmission")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub multiple_choice_submission: Option<MultipleChoiceSubmission>,
    #[serde(rename = "shortAnswerSubmission")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub short_answer_submission: Option<ShortAnswerSubmission>,
    /// State of this submission. Read-only.
    #[serde(rename = "state")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub state: Option<StudentSubmissionState>,
    /// The history of the submission (includes state and grade histories). Read-only.
    #[serde(rename = "submissionHistory")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub submission_history: Option<Vec<SubmissionHistory>>,
    /// Last update time of this submission. This may be unset if the student has not accessed this item. Read-only.
    #[serde(rename = "updateTime")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub update_time: Option<String>,
    /// Identifier for the student that owns this submission. Read-only.
    #[serde(rename = "userId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
}

/// The history of the submission. This currently includes state and grade histories.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct SubmissionHistory {
    #[serde(rename = "gradeHistory")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub grade_history: Option<GradeHistory>,
    #[serde(rename = "stateHistory")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub state_history: Option<StateHistory>,
}

/// Teacher of a course.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct Teacher {
    /// Identifier of the course. Read-only.
    #[serde(rename = "courseId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub course_id: Option<String>,
    #[serde(rename = "profile")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub profile: Option<UserProfile>,
    /// Identifier of the user. When specified as a parameter of a request, this identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user
    #[serde(rename = "userId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
}

/// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct TimeOfDay {
    /// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
    #[serde(rename = "hours")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub hours: Option<i32>,
    /// Minutes of hour of day. Must be from 0 to 59.
    #[serde(rename = "minutes")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub minutes: Option<i32>,
    /// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
    #[serde(rename = "nanos")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub nanos: Option<i32>,
    /// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
    #[serde(rename = "seconds")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub seconds: Option<i32>,
}

/// Topic created by a teacher for the course
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct Topic {
    /// Identifier of the course. Read-only.
    #[serde(rename = "courseId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub course_id: Option<String>,
    /// The name of the topic, generated by the user. Leading and trailing whitespaces, if any, are trimmed. Also, multiple consecutive whitespaces are collapsed into one inside the name. The result must be a non-empty string. Topic names are case sensitive, and must be no longer than 100 characters.
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Unique identifier for the topic. Read-only.
    #[serde(rename = "topicId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub topic_id: Option<String>,
    /// The time the topic was last updated by the system. Read-only.
    #[serde(rename = "updateTime")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub update_time: Option<String>,
}

/// Request to turn in a student submission.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct TurnInStudentSubmissionRequest {}

/// Global information for a user.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct UserProfile {
    /// Email address of the user. Must request `https://www.googleapis.com/auth/classroom.profile.emails` scope for this field to be populated in a response body. Read-only.
    #[serde(rename = "emailAddress")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub email_address: Option<String>,
    /// Identifier of the user. Read-only.
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<Name>,
    /// Global permissions of the user. Read-only.
    #[serde(rename = "permissions")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub permissions: Option<Vec<GlobalPermission>>,
    /// URL of user's profile photo. Must request `https://www.googleapis.com/auth/classroom.profile.photos` scope for this field to be populated in a response body. Read-only.
    #[serde(rename = "photoUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub photo_url: Option<String>,
    /// Represents whether a Google Workspace for Education user's domain administrator has explicitly verified them as being a teacher. This field is always false if the user is not a member of a Google Workspace for Education domain. Read-only
    #[serde(rename = "verifiedTeacher")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub verified_teacher: Option<bool>,
}

/// YouTube video item.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct YouTubeVideo {
    /// URL that can be used to view the YouTube video. Read-only.
    #[serde(rename = "alternateLink")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub alternate_link: Option<String>,
    /// YouTube API resource ID.
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// URL of a thumbnail image of the YouTube video. Read-only.
    #[serde(rename = "thumbnailUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub thumbnail_url: Option<String>,
    /// Title of the YouTube video. Read-only.
    #[serde(rename = "title")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum AnnouncementAssigneeMode {
    Undefined,
    /// No mode specified. This is never returned.
    #[serde(rename = "ALL_STUDENTS")]
    ALL_STUDENTS,
    /// All students can see the item. This is the default state.
    #[serde(rename = "ASSIGNEE_MODE_UNSPECIFIED")]
    ASSIGNEE_MODE_UNSPECIFIED,
    /// A subset of the students can see the item.
    #[serde(rename = "INDIVIDUAL_STUDENTS")]
    INDIVIDUAL_STUDENTS,
}

impl std::default::Default for AnnouncementAssigneeMode {
    fn default() -> AnnouncementAssigneeMode {
        AnnouncementAssigneeMode::Undefined
    }
}

impl std::fmt::Display for AnnouncementAssigneeMode {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            AnnouncementAssigneeMode::Undefined => write!(f, "undefined"),
            AnnouncementAssigneeMode::ALL_STUDENTS => write!(f, "ALL_STUDENTS"),
            AnnouncementAssigneeMode::ASSIGNEE_MODE_UNSPECIFIED => {
                write!(f, "ASSIGNEE_MODE_UNSPECIFIED")
            }
            AnnouncementAssigneeMode::INDIVIDUAL_STUDENTS => write!(f, "INDIVIDUAL_STUDENTS"),
        };
        Ok(())
    }
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum AnnouncementState {
    Undefined,
    /// No state specified. This is never returned.
    #[serde(rename = "ANNOUNCEMENT_STATE_UNSPECIFIED")]
    ANNOUNCEMENT_STATE_UNSPECIFIED,
    /// Status for announcement that has been published. This is the default state.
    #[serde(rename = "DELETED")]
    DELETED,
    /// Status for an announcement that is not yet published. Announcement in this state is visible only to course teachers and domain administrators.
    #[serde(rename = "DRAFT")]
    DRAFT,
    /// Status for announcement that was published but is now deleted. Announcement in this state is visible only to course teachers and domain administrators. Announcement in this state is deleted after some time.
    #[serde(rename = "PUBLISHED")]
    PUBLISHED,
}

impl std::default::Default for AnnouncementState {
    fn default() -> AnnouncementState {
        AnnouncementState::Undefined
    }
}

impl std::fmt::Display for AnnouncementState {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            AnnouncementState::Undefined => write!(f, "undefined"),
            AnnouncementState::ANNOUNCEMENT_STATE_UNSPECIFIED => {
                write!(f, "ANNOUNCEMENT_STATE_UNSPECIFIED")
            }
            AnnouncementState::DELETED => write!(f, "DELETED"),
            AnnouncementState::DRAFT => write!(f, "DRAFT"),
            AnnouncementState::PUBLISHED => write!(f, "PUBLISHED"),
        };
        Ok(())
    }
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum CourseCourseState {
    Undefined,
    /// No course state. No returned Course message will use this value.
    #[serde(rename = "ACTIVE")]
    ACTIVE,
    /// The course is active.
    #[serde(rename = "ARCHIVED")]
    ARCHIVED,
    /// The course has been archived. You cannot modify it except to change it to a different state.
    #[serde(rename = "COURSE_STATE_UNSPECIFIED")]
    COURSE_STATE_UNSPECIFIED,
    /// The course has been created, but not yet activated. It is accessible by the primary teacher and domain administrators, who may modify it or change it to the `ACTIVE` or `DECLINED` states. A course may only be changed to `PROVISIONED` if it is in the `DECLINED` state.
    #[serde(rename = "DECLINED")]
    DECLINED,
    /// The course has been created, but declined. It is accessible by the course owner and domain administrators, though it will not be displayed in the web UI. You cannot modify the course except to change it to the `PROVISIONED` state. A course may only be changed to `DECLINED` if it is in the `PROVISIONED` state.
    #[serde(rename = "PROVISIONED")]
    PROVISIONED,
    /// The course has been suspended. You cannot modify the course, and only the user identified by the `owner_id` can view the course. A course may be placed in this state if it potentially violates the Terms of Service.
    #[serde(rename = "SUSPENDED")]
    SUSPENDED,
}

impl std::default::Default for CourseCourseState {
    fn default() -> CourseCourseState {
        CourseCourseState::Undefined
    }
}

impl std::fmt::Display for CourseCourseState {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            CourseCourseState::Undefined => write!(f, "undefined"),
            CourseCourseState::ACTIVE => write!(f, "ACTIVE"),
            CourseCourseState::ARCHIVED => write!(f, "ARCHIVED"),
            CourseCourseState::COURSE_STATE_UNSPECIFIED => write!(f, "COURSE_STATE_UNSPECIFIED"),
            CourseCourseState::DECLINED => write!(f, "DECLINED"),
            CourseCourseState::PROVISIONED => write!(f, "PROVISIONED"),
            CourseCourseState::SUSPENDED => write!(f, "SUSPENDED"),
        };
        Ok(())
    }
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum CourseWorkAssigneeMode {
    Undefined,
    /// No mode specified. This is never returned.
    #[serde(rename = "ALL_STUDENTS")]
    ALL_STUDENTS,
    /// All students can see the item. This is the default state.
    #[serde(rename = "ASSIGNEE_MODE_UNSPECIFIED")]
    ASSIGNEE_MODE_UNSPECIFIED,
    /// A subset of the students can see the item.
    #[serde(rename = "INDIVIDUAL_STUDENTS")]
    INDIVIDUAL_STUDENTS,
}

impl std::default::Default for CourseWorkAssigneeMode {
    fn default() -> CourseWorkAssigneeMode {
        CourseWorkAssigneeMode::Undefined
    }
}

impl std::fmt::Display for CourseWorkAssigneeMode {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            CourseWorkAssigneeMode::Undefined => write!(f, "undefined"),
            CourseWorkAssigneeMode::ALL_STUDENTS => write!(f, "ALL_STUDENTS"),
            CourseWorkAssigneeMode::ASSIGNEE_MODE_UNSPECIFIED => {
                write!(f, "ASSIGNEE_MODE_UNSPECIFIED")
            }
            CourseWorkAssigneeMode::INDIVIDUAL_STUDENTS => write!(f, "INDIVIDUAL_STUDENTS"),
        };
        Ok(())
    }
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum CourseWorkState {
    Undefined,
    /// No state specified. This is never returned.
    #[serde(rename = "COURSE_WORK_STATE_UNSPECIFIED")]
    COURSE_WORK_STATE_UNSPECIFIED,
    /// Status for work that has been published. This is the default state.
    #[serde(rename = "DELETED")]
    DELETED,
    /// Status for work that is not yet published. Work in this state is visible only to course teachers and domain administrators.
    #[serde(rename = "DRAFT")]
    DRAFT,
    /// Status for work that was published but is now deleted. Work in this state is visible only to course teachers and domain administrators. Work in this state is deleted after some time.
    #[serde(rename = "PUBLISHED")]
    PUBLISHED,
}

impl std::default::Default for CourseWorkState {
    fn default() -> CourseWorkState {
        CourseWorkState::Undefined
    }
}

impl std::fmt::Display for CourseWorkState {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            CourseWorkState::Undefined => write!(f, "undefined"),
            CourseWorkState::COURSE_WORK_STATE_UNSPECIFIED => {
                write!(f, "COURSE_WORK_STATE_UNSPECIFIED")
            }
            CourseWorkState::DELETED => write!(f, "DELETED"),
            CourseWorkState::DRAFT => write!(f, "DRAFT"),
            CourseWorkState::PUBLISHED => write!(f, "PUBLISHED"),
        };
        Ok(())
    }
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum CourseWorkSubmissionModificationMode {
    Undefined,
    /// No modification mode specified. This is never returned.
    #[serde(rename = "MODIFIABLE")]
    MODIFIABLE,
    /// Submissions can be modified before being turned in.
    #[serde(rename = "MODIFIABLE_UNTIL_TURNED_IN")]
    MODIFIABLE_UNTIL_TURNED_IN,
    /// Submissions can be modified at any time.
    #[serde(rename = "SUBMISSION_MODIFICATION_MODE_UNSPECIFIED")]
    SUBMISSION_MODIFICATION_MODE_UNSPECIFIED,
}

impl std::default::Default for CourseWorkSubmissionModificationMode {
    fn default() -> CourseWorkSubmissionModificationMode {
        CourseWorkSubmissionModificationMode::Undefined
    }
}

impl std::fmt::Display for CourseWorkSubmissionModificationMode {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            CourseWorkSubmissionModificationMode::Undefined => write!(f, "undefined"),
            CourseWorkSubmissionModificationMode::MODIFIABLE => write!(f, "MODIFIABLE"),
            CourseWorkSubmissionModificationMode::MODIFIABLE_UNTIL_TURNED_IN => {
                write!(f, "MODIFIABLE_UNTIL_TURNED_IN")
            }
            CourseWorkSubmissionModificationMode::SUBMISSION_MODIFICATION_MODE_UNSPECIFIED => {
                write!(f, "SUBMISSION_MODIFICATION_MODE_UNSPECIFIED")
            }
        };
        Ok(())
    }
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum CourseWorkWorkType {
    Undefined,
    /// No work type specified. This is never returned.
    #[serde(rename = "ASSIGNMENT")]
    ASSIGNMENT,
    /// An assignment.
    #[serde(rename = "COURSE_WORK_TYPE_UNSPECIFIED")]
    COURSE_WORK_TYPE_UNSPECIFIED,
    /// A short answer question.
    #[serde(rename = "MULTIPLE_CHOICE_QUESTION")]
    MULTIPLE_CHOICE_QUESTION,
    /// A multiple-choice question.
    #[serde(rename = "SHORT_ANSWER_QUESTION")]
    SHORT_ANSWER_QUESTION,
}

impl std::default::Default for CourseWorkWorkType {
    fn default() -> CourseWorkWorkType {
        CourseWorkWorkType::Undefined
    }
}

impl std::fmt::Display for CourseWorkWorkType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            CourseWorkWorkType::Undefined => write!(f, "undefined"),
            CourseWorkWorkType::ASSIGNMENT => write!(f, "ASSIGNMENT"),
            CourseWorkWorkType::COURSE_WORK_TYPE_UNSPECIFIED => {
                write!(f, "COURSE_WORK_TYPE_UNSPECIFIED")
            }
            CourseWorkWorkType::MULTIPLE_CHOICE_QUESTION => write!(f, "MULTIPLE_CHOICE_QUESTION"),
            CourseWorkWorkType::SHORT_ANSWER_QUESTION => write!(f, "SHORT_ANSWER_QUESTION"),
        };
        Ok(())
    }
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum CourseWorkMaterialAssigneeMode {
    Undefined,
    /// No mode specified. This is never returned.
    #[serde(rename = "ALL_STUDENTS")]
    ALL_STUDENTS,
    /// All students can see the item. This is the default state.
    #[serde(rename = "ASSIGNEE_MODE_UNSPECIFIED")]
    ASSIGNEE_MODE_UNSPECIFIED,
    /// A subset of the students can see the item.
    #[serde(rename = "INDIVIDUAL_STUDENTS")]
    INDIVIDUAL_STUDENTS,
}

impl std::default::Default for CourseWorkMaterialAssigneeMode {
    fn default() -> CourseWorkMaterialAssigneeMode {
        CourseWorkMaterialAssigneeMode::Undefined
    }
}

impl std::fmt::Display for CourseWorkMaterialAssigneeMode {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            CourseWorkMaterialAssigneeMode::Undefined => write!(f, "undefined"),
            CourseWorkMaterialAssigneeMode::ALL_STUDENTS => write!(f, "ALL_STUDENTS"),
            CourseWorkMaterialAssigneeMode::ASSIGNEE_MODE_UNSPECIFIED => {
                write!(f, "ASSIGNEE_MODE_UNSPECIFIED")
            }
            CourseWorkMaterialAssigneeMode::INDIVIDUAL_STUDENTS => write!(f, "INDIVIDUAL_STUDENTS"),
        };
        Ok(())
    }
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum CourseWorkMaterialState {
    Undefined,
    /// No state specified. This is never returned.
    #[serde(rename = "COURSEWORK_MATERIAL_STATE_UNSPECIFIED")]
    COURSEWORK_MATERIAL_STATE_UNSPECIFIED,
    /// Status for course work material that has been published. This is the default state.
    #[serde(rename = "DELETED")]
    DELETED,
    /// Status for a course work material that is not yet published. Course work material in this state is visible only to course teachers and domain administrators.
    #[serde(rename = "DRAFT")]
    DRAFT,
    /// Status for course work material that was published but is now deleted. Course work material in this state is visible only to course teachers and domain administrators. Course work material in this state is deleted after some time.
    #[serde(rename = "PUBLISHED")]
    PUBLISHED,
}

impl std::default::Default for CourseWorkMaterialState {
    fn default() -> CourseWorkMaterialState {
        CourseWorkMaterialState::Undefined
    }
}

impl std::fmt::Display for CourseWorkMaterialState {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            CourseWorkMaterialState::Undefined => write!(f, "undefined"),
            CourseWorkMaterialState::COURSEWORK_MATERIAL_STATE_UNSPECIFIED => {
                write!(f, "COURSEWORK_MATERIAL_STATE_UNSPECIFIED")
            }
            CourseWorkMaterialState::DELETED => write!(f, "DELETED"),
            CourseWorkMaterialState::DRAFT => write!(f, "DRAFT"),
            CourseWorkMaterialState::PUBLISHED => write!(f, "PUBLISHED"),
        };
        Ok(())
    }
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum FeedFeedType {
    Undefined,
    /// Should never be returned or provided.
    #[serde(rename = "COURSE_ROSTER_CHANGES")]
    COURSE_ROSTER_CHANGES,
    /// All roster changes for a particular domain. Notifications will be generated whenever a user joins or leaves a course. No notifications will be generated when an invitation is created or deleted, but notifications will be generated when a user joins a course by accepting an invitation.
    #[serde(rename = "COURSE_WORK_CHANGES")]
    COURSE_WORK_CHANGES,
    /// All roster changes for a particular course. Notifications will be generated whenever a user joins or leaves a course. No notifications will be generated when an invitation is created or deleted, but notifications will be generated when a user joins a course by accepting an invitation.
    #[serde(rename = "DOMAIN_ROSTER_CHANGES")]
    DOMAIN_ROSTER_CHANGES,
    /// All course work activity for a particular course. Notifications will be generated when a CourseWork or StudentSubmission object is created or modified. No notification will be generated when a StudentSubmission object is created in connection with the creation or modification of its parent CourseWork object (but a notification will be generated for that CourseWork object's creation or modification).
    #[serde(rename = "FEED_TYPE_UNSPECIFIED")]
    FEED_TYPE_UNSPECIFIED,
}

impl std::default::Default for FeedFeedType {
    fn default() -> FeedFeedType {
        FeedFeedType::Undefined
    }
}

impl std::fmt::Display for FeedFeedType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            FeedFeedType::Undefined => write!(f, "undefined"),
            FeedFeedType::COURSE_ROSTER_CHANGES => write!(f, "COURSE_ROSTER_CHANGES"),
            FeedFeedType::COURSE_WORK_CHANGES => write!(f, "COURSE_WORK_CHANGES"),
            FeedFeedType::DOMAIN_ROSTER_CHANGES => write!(f, "DOMAIN_ROSTER_CHANGES"),
            FeedFeedType::FEED_TYPE_UNSPECIFIED => write!(f, "FEED_TYPE_UNSPECIFIED"),
        };
        Ok(())
    }
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum GlobalPermissionPermission {
    Undefined,
    /// No permission is specified. This is not returned and is not a valid value.
    #[serde(rename = "CREATE_COURSE")]
    CREATE_COURSE,
    /// User is permitted to create a course.
    #[serde(rename = "PERMISSION_UNSPECIFIED")]
    PERMISSION_UNSPECIFIED,
}

impl std::default::Default for GlobalPermissionPermission {
    fn default() -> GlobalPermissionPermission {
        GlobalPermissionPermission::Undefined
    }
}

impl std::fmt::Display for GlobalPermissionPermission {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            GlobalPermissionPermission::Undefined => write!(f, "undefined"),
            GlobalPermissionPermission::CREATE_COURSE => write!(f, "CREATE_COURSE"),
            GlobalPermissionPermission::PERMISSION_UNSPECIFIED => {
                write!(f, "PERMISSION_UNSPECIFIED")
            }
        };
        Ok(())
    }
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum GradeHistoryGradeChangeType {
    Undefined,
    /// No grade change type specified. This should never be returned.
    #[serde(rename = "ASSIGNED_GRADE_POINTS_EARNED_CHANGE")]
    ASSIGNED_GRADE_POINTS_EARNED_CHANGE,
    /// A change in the numerator of the draft grade.
    #[serde(rename = "DRAFT_GRADE_POINTS_EARNED_CHANGE")]
    DRAFT_GRADE_POINTS_EARNED_CHANGE,
    /// A change in the numerator of the assigned grade.
    #[serde(rename = "MAX_POINTS_CHANGE")]
    MAX_POINTS_CHANGE,
    /// A change in the denominator of the grade.
    #[serde(rename = "UNKNOWN_GRADE_CHANGE_TYPE")]
    UNKNOWN_GRADE_CHANGE_TYPE,
}

impl std::default::Default for GradeHistoryGradeChangeType {
    fn default() -> GradeHistoryGradeChangeType {
        GradeHistoryGradeChangeType::Undefined
    }
}

impl std::fmt::Display for GradeHistoryGradeChangeType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            GradeHistoryGradeChangeType::Undefined => write!(f, "undefined"),
            GradeHistoryGradeChangeType::ASSIGNED_GRADE_POINTS_EARNED_CHANGE => {
                write!(f, "ASSIGNED_GRADE_POINTS_EARNED_CHANGE")
            }
            GradeHistoryGradeChangeType::DRAFT_GRADE_POINTS_EARNED_CHANGE => {
                write!(f, "DRAFT_GRADE_POINTS_EARNED_CHANGE")
            }
            GradeHistoryGradeChangeType::MAX_POINTS_CHANGE => write!(f, "MAX_POINTS_CHANGE"),
            GradeHistoryGradeChangeType::UNKNOWN_GRADE_CHANGE_TYPE => {
                write!(f, "UNKNOWN_GRADE_CHANGE_TYPE")
            }
        };
        Ok(())
    }
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum GradebookSettingsCalculationType {
    Undefined,
    /// No method specified. This is never returned.
    #[serde(rename = "CALCULATION_TYPE_UNSPECIFIED")]
    CALCULATION_TYPE_UNSPECIFIED,
    /// Overall grade is the sum of grades divided by the sum of total points regardless of category.
    #[serde(rename = "TOTAL_POINTS")]
    TOTAL_POINTS,
    /// Overall grade is the weighted average by category.
    #[serde(rename = "WEIGHTED_CATEGORIES")]
    WEIGHTED_CATEGORIES,
}

impl std::default::Default for GradebookSettingsCalculationType {
    fn default() -> GradebookSettingsCalculationType {
        GradebookSettingsCalculationType::Undefined
    }
}

impl std::fmt::Display for GradebookSettingsCalculationType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            GradebookSettingsCalculationType::Undefined => write!(f, "undefined"),
            GradebookSettingsCalculationType::CALCULATION_TYPE_UNSPECIFIED => {
                write!(f, "CALCULATION_TYPE_UNSPECIFIED")
            }
            GradebookSettingsCalculationType::TOTAL_POINTS => write!(f, "TOTAL_POINTS"),
            GradebookSettingsCalculationType::WEIGHTED_CATEGORIES => {
                write!(f, "WEIGHTED_CATEGORIES")
            }
        };
        Ok(())
    }
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum GradebookSettingsDisplaySetting {
    Undefined,
    /// No setting specified. This is never returned.
    #[serde(rename = "DISPLAY_SETTING_UNSPECIFIED")]
    DISPLAY_SETTING_UNSPECIFIED,
    /// Shows overall grade in the gradebook and student profile to both teachers and students.
    #[serde(rename = "HIDE_OVERALL_GRADE")]
    HIDE_OVERALL_GRADE,
    /// Does not show overall grade in the gradebook or student profile.
    #[serde(rename = "SHOW_OVERALL_GRADE")]
    SHOW_OVERALL_GRADE,
    /// Shows the overall grade to teachers in the gradebook and student profile. Hides from students in their student profile.
    #[serde(rename = "SHOW_TEACHERS_ONLY")]
    SHOW_TEACHERS_ONLY,
}

impl std::default::Default for GradebookSettingsDisplaySetting {
    fn default() -> GradebookSettingsDisplaySetting {
        GradebookSettingsDisplaySetting::Undefined
    }
}

impl std::fmt::Display for GradebookSettingsDisplaySetting {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            GradebookSettingsDisplaySetting::Undefined => write!(f, "undefined"),
            GradebookSettingsDisplaySetting::DISPLAY_SETTING_UNSPECIFIED => {
                write!(f, "DISPLAY_SETTING_UNSPECIFIED")
            }
            GradebookSettingsDisplaySetting::HIDE_OVERALL_GRADE => write!(f, "HIDE_OVERALL_GRADE"),
            GradebookSettingsDisplaySetting::SHOW_OVERALL_GRADE => write!(f, "SHOW_OVERALL_GRADE"),
            GradebookSettingsDisplaySetting::SHOW_TEACHERS_ONLY => write!(f, "SHOW_TEACHERS_ONLY"),
        };
        Ok(())
    }
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum GuardianInvitationState {
    Undefined,
    /// Should never be returned.
    #[serde(rename = "COMPLETE")]
    COMPLETE,
    /// The invitation is active and awaiting a response.
    #[serde(rename = "GUARDIAN_INVITATION_STATE_UNSPECIFIED")]
    GUARDIAN_INVITATION_STATE_UNSPECIFIED,
    /// The invitation is no longer active. It may have been accepted, declined, withdrawn or it may have expired.
    #[serde(rename = "PENDING")]
    PENDING,
}

impl std::default::Default for GuardianInvitationState {
    fn default() -> GuardianInvitationState {
        GuardianInvitationState::Undefined
    }
}

impl std::fmt::Display for GuardianInvitationState {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            GuardianInvitationState::Undefined => write!(f, "undefined"),
            GuardianInvitationState::COMPLETE => write!(f, "COMPLETE"),
            GuardianInvitationState::GUARDIAN_INVITATION_STATE_UNSPECIFIED => {
                write!(f, "GUARDIAN_INVITATION_STATE_UNSPECIFIED")
            }
            GuardianInvitationState::PENDING => write!(f, "PENDING"),
        };
        Ok(())
    }
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum InvitationRole {
    Undefined,
    /// No course role.
    #[serde(rename = "COURSE_ROLE_UNSPECIFIED")]
    COURSE_ROLE_UNSPECIFIED,
    /// Student in the course.
    #[serde(rename = "OWNER")]
    OWNER,
    /// Teacher of the course.
    #[serde(rename = "STUDENT")]
    STUDENT,
    /// Owner of the course.
    #[serde(rename = "TEACHER")]
    TEACHER,
}

impl std::default::Default for InvitationRole {
    fn default() -> InvitationRole {
        InvitationRole::Undefined
    }
}

impl std::fmt::Display for InvitationRole {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            InvitationRole::Undefined => write!(f, "undefined"),
            InvitationRole::COURSE_ROLE_UNSPECIFIED => write!(f, "COURSE_ROLE_UNSPECIFIED"),
            InvitationRole::OWNER => write!(f, "OWNER"),
            InvitationRole::STUDENT => write!(f, "STUDENT"),
            InvitationRole::TEACHER => write!(f, "TEACHER"),
        };
        Ok(())
    }
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum ModifyAnnouncementAssigneesRequestAssigneeMode {
    Undefined,
    /// No mode specified. This is never returned.
    #[serde(rename = "ALL_STUDENTS")]
    ALL_STUDENTS,
    /// All students can see the item. This is the default state.
    #[serde(rename = "ASSIGNEE_MODE_UNSPECIFIED")]
    ASSIGNEE_MODE_UNSPECIFIED,
    /// A subset of the students can see the item.
    #[serde(rename = "INDIVIDUAL_STUDENTS")]
    INDIVIDUAL_STUDENTS,
}

impl std::default::Default for ModifyAnnouncementAssigneesRequestAssigneeMode {
    fn default() -> ModifyAnnouncementAssigneesRequestAssigneeMode {
        ModifyAnnouncementAssigneesRequestAssigneeMode::Undefined
    }
}

impl std::fmt::Display for ModifyAnnouncementAssigneesRequestAssigneeMode {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            ModifyAnnouncementAssigneesRequestAssigneeMode::Undefined => write!(f, "undefined"),
            ModifyAnnouncementAssigneesRequestAssigneeMode::ALL_STUDENTS => {
                write!(f, "ALL_STUDENTS")
            }
            ModifyAnnouncementAssigneesRequestAssigneeMode::ASSIGNEE_MODE_UNSPECIFIED => {
                write!(f, "ASSIGNEE_MODE_UNSPECIFIED")
            }
            ModifyAnnouncementAssigneesRequestAssigneeMode::INDIVIDUAL_STUDENTS => {
                write!(f, "INDIVIDUAL_STUDENTS")
            }
        };
        Ok(())
    }
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum ModifyCourseWorkAssigneesRequestAssigneeMode {
    Undefined,
    /// No mode specified. This is never returned.
    #[serde(rename = "ALL_STUDENTS")]
    ALL_STUDENTS,
    /// All students can see the item. This is the default state.
    #[serde(rename = "ASSIGNEE_MODE_UNSPECIFIED")]
    ASSIGNEE_MODE_UNSPECIFIED,
    /// A subset of the students can see the item.
    #[serde(rename = "INDIVIDUAL_STUDENTS")]
    INDIVIDUAL_STUDENTS,
}

impl std::default::Default for ModifyCourseWorkAssigneesRequestAssigneeMode {
    fn default() -> ModifyCourseWorkAssigneesRequestAssigneeMode {
        ModifyCourseWorkAssigneesRequestAssigneeMode::Undefined
    }
}

impl std::fmt::Display for ModifyCourseWorkAssigneesRequestAssigneeMode {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            ModifyCourseWorkAssigneesRequestAssigneeMode::Undefined => write!(f, "undefined"),
            ModifyCourseWorkAssigneesRequestAssigneeMode::ALL_STUDENTS => write!(f, "ALL_STUDENTS"),
            ModifyCourseWorkAssigneesRequestAssigneeMode::ASSIGNEE_MODE_UNSPECIFIED => {
                write!(f, "ASSIGNEE_MODE_UNSPECIFIED")
            }
            ModifyCourseWorkAssigneesRequestAssigneeMode::INDIVIDUAL_STUDENTS => {
                write!(f, "INDIVIDUAL_STUDENTS")
            }
        };
        Ok(())
    }
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum SharedDriveFileShareMode {
    Undefined,
    /// No sharing mode specified. This should never be returned.
    #[serde(rename = "EDIT")]
    EDIT,
    /// Students can view the shared file.
    #[serde(rename = "STUDENT_COPY")]
    STUDENT_COPY,
    /// Students can edit the shared file.
    #[serde(rename = "UNKNOWN_SHARE_MODE")]
    UNKNOWN_SHARE_MODE,
    /// Students have a personal copy of the shared file.
    #[serde(rename = "VIEW")]
    VIEW,
}

impl std::default::Default for SharedDriveFileShareMode {
    fn default() -> SharedDriveFileShareMode {
        SharedDriveFileShareMode::Undefined
    }
}

impl std::fmt::Display for SharedDriveFileShareMode {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            SharedDriveFileShareMode::Undefined => write!(f, "undefined"),
            SharedDriveFileShareMode::EDIT => write!(f, "EDIT"),
            SharedDriveFileShareMode::STUDENT_COPY => write!(f, "STUDENT_COPY"),
            SharedDriveFileShareMode::UNKNOWN_SHARE_MODE => write!(f, "UNKNOWN_SHARE_MODE"),
            SharedDriveFileShareMode::VIEW => write!(f, "VIEW"),
        };
        Ok(())
    }
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum StateHistoryState {
    Undefined,
    /// No state specified. This should never be returned.
    #[serde(rename = "CREATED")]
    CREATED,
    /// The Submission has been created.
    #[serde(rename = "RECLAIMED_BY_STUDENT")]
    RECLAIMED_BY_STUDENT,
    /// The student has turned in an assigned document, which may or may not be a template.
    #[serde(rename = "RETURNED")]
    RETURNED,
    /// The teacher has returned the assigned document to the student.
    #[serde(rename = "STATE_UNSPECIFIED")]
    STATE_UNSPECIFIED,
    /// The student turned in the assigned document, and then chose to "unsubmit" the assignment, giving the student control again as the owner.
    #[serde(rename = "STUDENT_EDITED_AFTER_TURN_IN")]
    STUDENT_EDITED_AFTER_TURN_IN,
    /// The student edited their submission after turning it in. Currently, only used by Questions, when the student edits their answer.
    #[serde(rename = "TURNED_IN")]
    TURNED_IN,
}

impl std::default::Default for StateHistoryState {
    fn default() -> StateHistoryState {
        StateHistoryState::Undefined
    }
}

impl std::fmt::Display for StateHistoryState {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            StateHistoryState::Undefined => write!(f, "undefined"),
            StateHistoryState::CREATED => write!(f, "CREATED"),
            StateHistoryState::RECLAIMED_BY_STUDENT => write!(f, "RECLAIMED_BY_STUDENT"),
            StateHistoryState::RETURNED => write!(f, "RETURNED"),
            StateHistoryState::STATE_UNSPECIFIED => write!(f, "STATE_UNSPECIFIED"),
            StateHistoryState::STUDENT_EDITED_AFTER_TURN_IN => {
                write!(f, "STUDENT_EDITED_AFTER_TURN_IN")
            }
            StateHistoryState::TURNED_IN => write!(f, "TURNED_IN"),
        };
        Ok(())
    }
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum StudentSubmissionCourseWorkType {
    Undefined,
    /// No work type specified. This is never returned.
    #[serde(rename = "ASSIGNMENT")]
    ASSIGNMENT,
    /// An assignment.
    #[serde(rename = "COURSE_WORK_TYPE_UNSPECIFIED")]
    COURSE_WORK_TYPE_UNSPECIFIED,
    /// A short answer question.
    #[serde(rename = "MULTIPLE_CHOICE_QUESTION")]
    MULTIPLE_CHOICE_QUESTION,
    /// A multiple-choice question.
    #[serde(rename = "SHORT_ANSWER_QUESTION")]
    SHORT_ANSWER_QUESTION,
}

impl std::default::Default for StudentSubmissionCourseWorkType {
    fn default() -> StudentSubmissionCourseWorkType {
        StudentSubmissionCourseWorkType::Undefined
    }
}

impl std::fmt::Display for StudentSubmissionCourseWorkType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            StudentSubmissionCourseWorkType::Undefined => write!(f, "undefined"),
            StudentSubmissionCourseWorkType::ASSIGNMENT => write!(f, "ASSIGNMENT"),
            StudentSubmissionCourseWorkType::COURSE_WORK_TYPE_UNSPECIFIED => {
                write!(f, "COURSE_WORK_TYPE_UNSPECIFIED")
            }
            StudentSubmissionCourseWorkType::MULTIPLE_CHOICE_QUESTION => {
                write!(f, "MULTIPLE_CHOICE_QUESTION")
            }
            StudentSubmissionCourseWorkType::SHORT_ANSWER_QUESTION => {
                write!(f, "SHORT_ANSWER_QUESTION")
            }
        };
        Ok(())
    }
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum StudentSubmissionState {
    Undefined,
    /// No state specified. This should never be returned.
    #[serde(rename = "CREATED")]
    CREATED,
    /// The student has never accessed this submission. Attachments are not returned and timestamps is not set.
    #[serde(rename = "NEW")]
    NEW,
    /// Has been created.
    #[serde(rename = "RECLAIMED_BY_STUDENT")]
    RECLAIMED_BY_STUDENT,
    /// Has been turned in to the teacher.
    #[serde(rename = "RETURNED")]
    RETURNED,
    /// Has been returned to the student.
    #[serde(rename = "SUBMISSION_STATE_UNSPECIFIED")]
    SUBMISSION_STATE_UNSPECIFIED,
    /// Student chose to "unsubmit" the assignment.
    #[serde(rename = "TURNED_IN")]
    TURNED_IN,
}

impl std::default::Default for StudentSubmissionState {
    fn default() -> StudentSubmissionState {
        StudentSubmissionState::Undefined
    }
}

impl std::fmt::Display for StudentSubmissionState {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            StudentSubmissionState::Undefined => write!(f, "undefined"),
            StudentSubmissionState::CREATED => write!(f, "CREATED"),
            StudentSubmissionState::NEW => write!(f, "NEW"),
            StudentSubmissionState::RECLAIMED_BY_STUDENT => write!(f, "RECLAIMED_BY_STUDENT"),
            StudentSubmissionState::RETURNED => write!(f, "RETURNED"),
            StudentSubmissionState::SUBMISSION_STATE_UNSPECIFIED => {
                write!(f, "SUBMISSION_STATE_UNSPECIFIED")
            }
            StudentSubmissionState::TURNED_IN => write!(f, "TURNED_IN"),
        };
        Ok(())
    }
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum CoursesListCourseStates {
    Undefined,
    /// No course state. No returned Course message will use this value.
    #[serde(rename = "ACTIVE")]
    ACTIVE,
    /// The course is active.
    #[serde(rename = "ARCHIVED")]
    ARCHIVED,
    /// The course has been archived. You cannot modify it except to change it to a different state.
    #[serde(rename = "COURSE_STATE_UNSPECIFIED")]
    COURSE_STATE_UNSPECIFIED,
    /// The course has been created, but not yet activated. It is accessible by the primary teacher and domain administrators, who may modify it or change it to the `ACTIVE` or `DECLINED` states. A course may only be changed to `PROVISIONED` if it is in the `DECLINED` state.
    #[serde(rename = "DECLINED")]
    DECLINED,
    /// The course has been created, but declined. It is accessible by the course owner and domain administrators, though it will not be displayed in the web UI. You cannot modify the course except to change it to the `PROVISIONED` state. A course may only be changed to `DECLINED` if it is in the `PROVISIONED` state.
    #[serde(rename = "PROVISIONED")]
    PROVISIONED,
    /// The course has been suspended. You cannot modify the course, and only the user identified by the `owner_id` can view the course. A course may be placed in this state if it potentially violates the Terms of Service.
    #[serde(rename = "SUSPENDED")]
    SUSPENDED,
}

impl std::default::Default for CoursesListCourseStates {
    fn default() -> CoursesListCourseStates {
        CoursesListCourseStates::Undefined
    }
}

impl std::fmt::Display for CoursesListCourseStates {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            CoursesListCourseStates::Undefined => write!(f, "undefined"),
            CoursesListCourseStates::ACTIVE => write!(f, "ACTIVE"),
            CoursesListCourseStates::ARCHIVED => write!(f, "ARCHIVED"),
            CoursesListCourseStates::COURSE_STATE_UNSPECIFIED => {
                write!(f, "COURSE_STATE_UNSPECIFIED")
            }
            CoursesListCourseStates::DECLINED => write!(f, "DECLINED"),
            CoursesListCourseStates::PROVISIONED => write!(f, "PROVISIONED"),
            CoursesListCourseStates::SUSPENDED => write!(f, "SUSPENDED"),
        };
        Ok(())
    }
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum AnnouncementsListAnnouncementStates {
    Undefined,
    /// No state specified. This is never returned.
    #[serde(rename = "ANNOUNCEMENT_STATE_UNSPECIFIED")]
    ANNOUNCEMENT_STATE_UNSPECIFIED,
    /// Status for announcement that has been published. This is the default state.
    #[serde(rename = "DELETED")]
    DELETED,
    /// Status for an announcement that is not yet published. Announcement in this state is visible only to course teachers and domain administrators.
    #[serde(rename = "DRAFT")]
    DRAFT,
    /// Status for announcement that was published but is now deleted. Announcement in this state is visible only to course teachers and domain administrators. Announcement in this state is deleted after some time.
    #[serde(rename = "PUBLISHED")]
    PUBLISHED,
}

impl std::default::Default for AnnouncementsListAnnouncementStates {
    fn default() -> AnnouncementsListAnnouncementStates {
        AnnouncementsListAnnouncementStates::Undefined
    }
}

impl std::fmt::Display for AnnouncementsListAnnouncementStates {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            AnnouncementsListAnnouncementStates::Undefined => write!(f, "undefined"),
            AnnouncementsListAnnouncementStates::ANNOUNCEMENT_STATE_UNSPECIFIED => {
                write!(f, "ANNOUNCEMENT_STATE_UNSPECIFIED")
            }
            AnnouncementsListAnnouncementStates::DELETED => write!(f, "DELETED"),
            AnnouncementsListAnnouncementStates::DRAFT => write!(f, "DRAFT"),
            AnnouncementsListAnnouncementStates::PUBLISHED => write!(f, "PUBLISHED"),
        };
        Ok(())
    }
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum CourseWorkListCourseWorkStates {
    Undefined,
    /// No state specified. This is never returned.
    #[serde(rename = "COURSE_WORK_STATE_UNSPECIFIED")]
    COURSE_WORK_STATE_UNSPECIFIED,
    /// Status for work that has been published. This is the default state.
    #[serde(rename = "DELETED")]
    DELETED,
    /// Status for work that is not yet published. Work in this state is visible only to course teachers and domain administrators.
    #[serde(rename = "DRAFT")]
    DRAFT,
    /// Status for work that was published but is now deleted. Work in this state is visible only to course teachers and domain administrators. Work in this state is deleted after some time.
    #[serde(rename = "PUBLISHED")]
    PUBLISHED,
}

impl std::default::Default for CourseWorkListCourseWorkStates {
    fn default() -> CourseWorkListCourseWorkStates {
        CourseWorkListCourseWorkStates::Undefined
    }
}

impl std::fmt::Display for CourseWorkListCourseWorkStates {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            CourseWorkListCourseWorkStates::Undefined => write!(f, "undefined"),
            CourseWorkListCourseWorkStates::COURSE_WORK_STATE_UNSPECIFIED => {
                write!(f, "COURSE_WORK_STATE_UNSPECIFIED")
            }
            CourseWorkListCourseWorkStates::DELETED => write!(f, "DELETED"),
            CourseWorkListCourseWorkStates::DRAFT => write!(f, "DRAFT"),
            CourseWorkListCourseWorkStates::PUBLISHED => write!(f, "PUBLISHED"),
        };
        Ok(())
    }
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum StudentSubmissionsListLate {
    Undefined,
    /// No restriction on submission late values specified.
    #[serde(rename = "LATE_ONLY")]
    LATE_ONLY,
    /// Return StudentSubmissions where late is true.
    #[serde(rename = "LATE_VALUES_UNSPECIFIED")]
    LATE_VALUES_UNSPECIFIED,
    /// Return StudentSubmissions where late is false.
    #[serde(rename = "NOT_LATE_ONLY")]
    NOT_LATE_ONLY,
}

impl std::default::Default for StudentSubmissionsListLate {
    fn default() -> StudentSubmissionsListLate {
        StudentSubmissionsListLate::Undefined
    }
}

impl std::fmt::Display for StudentSubmissionsListLate {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            StudentSubmissionsListLate::Undefined => write!(f, "undefined"),
            StudentSubmissionsListLate::LATE_ONLY => write!(f, "LATE_ONLY"),
            StudentSubmissionsListLate::LATE_VALUES_UNSPECIFIED => {
                write!(f, "LATE_VALUES_UNSPECIFIED")
            }
            StudentSubmissionsListLate::NOT_LATE_ONLY => write!(f, "NOT_LATE_ONLY"),
        };
        Ok(())
    }
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum StudentSubmissionsListStates {
    Undefined,
    /// No state specified. This should never be returned.
    #[serde(rename = "CREATED")]
    CREATED,
    /// The student has never accessed this submission. Attachments are not returned and timestamps is not set.
    #[serde(rename = "NEW")]
    NEW,
    /// Has been created.
    #[serde(rename = "RECLAIMED_BY_STUDENT")]
    RECLAIMED_BY_STUDENT,
    /// Has been turned in to the teacher.
    #[serde(rename = "RETURNED")]
    RETURNED,
    /// Has been returned to the student.
    #[serde(rename = "SUBMISSION_STATE_UNSPECIFIED")]
    SUBMISSION_STATE_UNSPECIFIED,
    /// Student chose to "unsubmit" the assignment.
    #[serde(rename = "TURNED_IN")]
    TURNED_IN,
}

impl std::default::Default for StudentSubmissionsListStates {
    fn default() -> StudentSubmissionsListStates {
        StudentSubmissionsListStates::Undefined
    }
}

impl std::fmt::Display for StudentSubmissionsListStates {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            StudentSubmissionsListStates::Undefined => write!(f, "undefined"),
            StudentSubmissionsListStates::CREATED => write!(f, "CREATED"),
            StudentSubmissionsListStates::NEW => write!(f, "NEW"),
            StudentSubmissionsListStates::RECLAIMED_BY_STUDENT => write!(f, "RECLAIMED_BY_STUDENT"),
            StudentSubmissionsListStates::RETURNED => write!(f, "RETURNED"),
            StudentSubmissionsListStates::SUBMISSION_STATE_UNSPECIFIED => {
                write!(f, "SUBMISSION_STATE_UNSPECIFIED")
            }
            StudentSubmissionsListStates::TURNED_IN => write!(f, "TURNED_IN"),
        };
        Ok(())
    }
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum CourseWorkMaterialsListCourseWorkMaterialStates {
    Undefined,
    /// No state specified. This is never returned.
    #[serde(rename = "COURSEWORK_MATERIAL_STATE_UNSPECIFIED")]
    COURSEWORK_MATERIAL_STATE_UNSPECIFIED,
    /// Status for course work material that has been published. This is the default state.
    #[serde(rename = "DELETED")]
    DELETED,
    /// Status for a course work material that is not yet published. Course work material in this state is visible only to course teachers and domain administrators.
    #[serde(rename = "DRAFT")]
    DRAFT,
    /// Status for course work material that was published but is now deleted. Course work material in this state is visible only to course teachers and domain administrators. Course work material in this state is deleted after some time.
    #[serde(rename = "PUBLISHED")]
    PUBLISHED,
}

impl std::default::Default for CourseWorkMaterialsListCourseWorkMaterialStates {
    fn default() -> CourseWorkMaterialsListCourseWorkMaterialStates {
        CourseWorkMaterialsListCourseWorkMaterialStates::Undefined
    }
}

impl std::fmt::Display for CourseWorkMaterialsListCourseWorkMaterialStates {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            CourseWorkMaterialsListCourseWorkMaterialStates::Undefined => write!(f, "undefined"),
            CourseWorkMaterialsListCourseWorkMaterialStates::COURSEWORK_MATERIAL_STATE_UNSPECIFIED => write!(f, "COURSEWORK_MATERIAL_STATE_UNSPECIFIED"),
            CourseWorkMaterialsListCourseWorkMaterialStates::DELETED => write!(f, "DELETED"),
            CourseWorkMaterialsListCourseWorkMaterialStates::DRAFT => write!(f, "DRAFT"),
            CourseWorkMaterialsListCourseWorkMaterialStates::PUBLISHED => write!(f, "PUBLISHED"),
        };
        Ok(())
    }
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum GuardianInvitationsListStates {
    Undefined,
    /// Should never be returned.
    #[serde(rename = "COMPLETE")]
    COMPLETE,
    /// The invitation is active and awaiting a response.
    #[serde(rename = "GUARDIAN_INVITATION_STATE_UNSPECIFIED")]
    GUARDIAN_INVITATION_STATE_UNSPECIFIED,
    /// The invitation is no longer active. It may have been accepted, declined, withdrawn or it may have expired.
    #[serde(rename = "PENDING")]
    PENDING,
}

impl std::default::Default for GuardianInvitationsListStates {
    fn default() -> GuardianInvitationsListStates {
        GuardianInvitationsListStates::Undefined
    }
}

impl std::fmt::Display for GuardianInvitationsListStates {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            GuardianInvitationsListStates::Undefined => write!(f, "undefined"),
            GuardianInvitationsListStates::COMPLETE => write!(f, "COMPLETE"),
            GuardianInvitationsListStates::GUARDIAN_INVITATION_STATE_UNSPECIFIED => {
                write!(f, "GUARDIAN_INVITATION_STATE_UNSPECIFIED")
            }
            GuardianInvitationsListStates::PENDING => write!(f, "PENDING"),
        };
        Ok(())
    }
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum ClassroomParamsdollar_xgafv {
    Undefined,
    /// v1 error format
    #[serde(rename = "1")]
    _1,
    /// v2 error format
    #[serde(rename = "2")]
    _2,
}

impl std::default::Default for ClassroomParamsdollar_xgafv {
    fn default() -> ClassroomParamsdollar_xgafv {
        ClassroomParamsdollar_xgafv::Undefined
    }
}

impl std::fmt::Display for ClassroomParamsdollar_xgafv {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            ClassroomParamsdollar_xgafv::Undefined => write!(f, "undefined"),
            ClassroomParamsdollar_xgafv::_1 => write!(f, "1"),
            ClassroomParamsdollar_xgafv::_2 => write!(f, "2"),
        };
        Ok(())
    }
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum ClassroomParamsAlt {
    Undefined,
    /// Responses with Content-Type of application/json
    #[serde(rename = "json")]
    Json,
    /// Media download with context-dependent Content-Type
    #[serde(rename = "media")]
    Media,
    /// Responses with Content-Type of application/x-protobuf
    #[serde(rename = "proto")]
    Proto,
}

impl std::default::Default for ClassroomParamsAlt {
    fn default() -> ClassroomParamsAlt {
        ClassroomParamsAlt::Undefined
    }
}

impl std::fmt::Display for ClassroomParamsAlt {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            ClassroomParamsAlt::Undefined => write!(f, "undefined"),
            ClassroomParamsAlt::Json => write!(f, "json"),
            ClassroomParamsAlt::Media => write!(f, "media"),
            ClassroomParamsAlt::Proto => write!(f, "proto"),
        };
        Ok(())
    }
}

/// Parameters for the `courses.create` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesCreateParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
}

impl std::fmt::Display for CoursesCreateParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `courses.delete` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesDeleteParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course to delete. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "id")]
    pub id: String,
}

impl std::fmt::Display for CoursesDeleteParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `courses.get` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesGetParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course to return. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "id")]
    pub id: String,
}

impl std::fmt::Display for CoursesGetParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `courses.list` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesListParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Restricts returned courses to those in one of the specified states The default value is ACTIVE, ARCHIVED, PROVISIONED, DECLINED.
    #[serde(rename = "courseStates")]
    pub course_states: Option<CoursesListCourseStates>,
    /// Maximum number of items to return. Zero or unspecified indicates that the server may assign a maximum. The server may return fewer than the specified number of results.
    #[serde(rename = "pageSize")]
    pub page_size: Option<i32>,
    /// nextPageToken value returned from a previous list call, indicating that the subsequent page of results should be returned. The list request must be otherwise identical to the one that resulted in this token.
    #[serde(rename = "pageToken")]
    pub page_token: Option<String>,
    /// Restricts returned courses to those having a student with the specified identifier. The identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user
    #[serde(rename = "studentId")]
    pub student_id: Option<String>,
    /// Restricts returned courses to those having a teacher with the specified identifier. The identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user
    #[serde(rename = "teacherId")]
    pub teacher_id: Option<String>,
}

impl std::fmt::Display for CoursesListParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        if let Some(ref v) = self.course_states {
            write!(
                f,
                "&courseStates={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.page_size {
            write!(
                f,
                "&pageSize={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.page_token {
            write!(
                f,
                "&pageToken={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.student_id {
            write!(
                f,
                "&studentId={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.teacher_id {
            write!(
                f,
                "&teacherId={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `courses.patch` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesPatchParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course to update. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "id")]
    pub id: String,
    /// Mask that identifies which fields on the course to update. This field is required to do an update. The update will fail if invalid fields are specified. The following fields are valid: * `name` * `section` * `descriptionHeading` * `description` * `room` * `courseState` * `ownerId` Note: patches to ownerId are treated as being effective immediately, but in practice it may take some time for the ownership transfer of all affected resources to complete. When set in a query parameter, this field should be specified as `updateMask=,,...`
    #[serde(rename = "updateMask")]
    pub update_mask: Option<String>,
}

impl std::fmt::Display for CoursesPatchParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        if let Some(ref v) = self.update_mask {
            write!(
                f,
                "&updateMask={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `courses.update` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesUpdateParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course to update. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "id")]
    pub id: String,
}

impl std::fmt::Display for CoursesUpdateParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `aliases.create` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesAliasesCreateParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course to alias. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "courseId")]
    pub course_id: String,
}

impl std::fmt::Display for CoursesAliasesCreateParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `aliases.delete` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesAliasesDeleteParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Alias to delete. This may not be the Classroom-assigned identifier.
    #[serde(rename = "alias")]
    pub alias: String,
    /// Identifier of the course whose alias should be deleted. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "courseId")]
    pub course_id: String,
}

impl std::fmt::Display for CoursesAliasesDeleteParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `aliases.list` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesAliasesListParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// The identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "courseId")]
    pub course_id: String,
    /// Maximum number of items to return. Zero or unspecified indicates that the server may assign a maximum. The server may return fewer than the specified number of results.
    #[serde(rename = "pageSize")]
    pub page_size: Option<i32>,
    /// nextPageToken value returned from a previous list call, indicating that the subsequent page of results should be returned. The list request must be otherwise identical to the one that resulted in this token.
    #[serde(rename = "pageToken")]
    pub page_token: Option<String>,
}

impl std::fmt::Display for CoursesAliasesListParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        if let Some(ref v) = self.page_size {
            write!(
                f,
                "&pageSize={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.page_token {
            write!(
                f,
                "&pageToken={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `announcements.create` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesAnnouncementsCreateParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "courseId")]
    pub course_id: String,
}

impl std::fmt::Display for CoursesAnnouncementsCreateParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `announcements.delete` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesAnnouncementsDeleteParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "courseId")]
    pub course_id: String,
    /// Identifier of the announcement to delete. This identifier is a Classroom-assigned identifier.
    #[serde(rename = "id")]
    pub id: String,
}

impl std::fmt::Display for CoursesAnnouncementsDeleteParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `announcements.get` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesAnnouncementsGetParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "courseId")]
    pub course_id: String,
    /// Identifier of the announcement.
    #[serde(rename = "id")]
    pub id: String,
}

impl std::fmt::Display for CoursesAnnouncementsGetParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `announcements.list` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesAnnouncementsListParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Restriction on the `state` of announcements returned. If this argument is left unspecified, the default value is `PUBLISHED`.
    #[serde(rename = "announcementStates")]
    pub announcement_states: Option<AnnouncementsListAnnouncementStates>,
    /// Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "courseId")]
    pub course_id: String,
    /// Optional sort ordering for results. A comma-separated list of fields with an optional sort direction keyword. Supported field is `updateTime`. Supported direction keywords are `asc` and `desc`. If not specified, `updateTime desc` is the default behavior. Examples: `updateTime asc`, `updateTime`
    #[serde(rename = "orderBy")]
    pub order_by: Option<String>,
    /// Maximum number of items to return. Zero or unspecified indicates that the server may assign a maximum. The server may return fewer than the specified number of results.
    #[serde(rename = "pageSize")]
    pub page_size: Option<i32>,
    /// nextPageToken value returned from a previous list call, indicating that the subsequent page of results should be returned. The list request must be otherwise identical to the one that resulted in this token.
    #[serde(rename = "pageToken")]
    pub page_token: Option<String>,
}

impl std::fmt::Display for CoursesAnnouncementsListParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        if let Some(ref v) = self.announcement_states {
            write!(
                f,
                "&announcementStates={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.order_by {
            write!(
                f,
                "&orderBy={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.page_size {
            write!(
                f,
                "&pageSize={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.page_token {
            write!(
                f,
                "&pageToken={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `announcements.modifyAssignees` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesAnnouncementsModifyAssigneesParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "courseId")]
    pub course_id: String,
    /// Identifier of the announcement.
    #[serde(rename = "id")]
    pub id: String,
}

impl std::fmt::Display for CoursesAnnouncementsModifyAssigneesParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `announcements.patch` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesAnnouncementsPatchParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "courseId")]
    pub course_id: String,
    /// Identifier of the announcement.
    #[serde(rename = "id")]
    pub id: String,
    /// Mask that identifies which fields on the announcement to update. This field is required to do an update. The update fails if invalid fields are specified. If a field supports empty values, it can be cleared by specifying it in the update mask and not in the Announcement object. If a field that does not support empty values is included in the update mask and not set in the Announcement object, an `INVALID_ARGUMENT` error is returned. The following fields may be specified by teachers: * `text` * `state` * `scheduled_time`
    #[serde(rename = "updateMask")]
    pub update_mask: Option<String>,
}

impl std::fmt::Display for CoursesAnnouncementsPatchParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        if let Some(ref v) = self.update_mask {
            write!(
                f,
                "&updateMask={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `courseWork.create` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesCourseWorkCreateParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "courseId")]
    pub course_id: String,
}

impl std::fmt::Display for CoursesCourseWorkCreateParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `courseWork.delete` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesCourseWorkDeleteParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "courseId")]
    pub course_id: String,
    /// Identifier of the course work to delete. This identifier is a Classroom-assigned identifier.
    #[serde(rename = "id")]
    pub id: String,
}

impl std::fmt::Display for CoursesCourseWorkDeleteParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `courseWork.get` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesCourseWorkGetParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "courseId")]
    pub course_id: String,
    /// Identifier of the course work.
    #[serde(rename = "id")]
    pub id: String,
}

impl std::fmt::Display for CoursesCourseWorkGetParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `courseWork.list` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesCourseWorkListParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "courseId")]
    pub course_id: String,
    /// Restriction on the work status to return. Only courseWork that matches is returned. If unspecified, items with a work status of `PUBLISHED` is returned.
    #[serde(rename = "courseWorkStates")]
    pub course_work_states: Option<CourseWorkListCourseWorkStates>,
    /// Optional sort ordering for results. A comma-separated list of fields with an optional sort direction keyword. Supported fields are `updateTime` and `dueDate`. Supported direction keywords are `asc` and `desc`. If not specified, `updateTime desc` is the default behavior. Examples: `dueDate asc,updateTime desc`, `updateTime,dueDate desc`
    #[serde(rename = "orderBy")]
    pub order_by: Option<String>,
    /// Maximum number of items to return. Zero or unspecified indicates that the server may assign a maximum. The server may return fewer than the specified number of results.
    #[serde(rename = "pageSize")]
    pub page_size: Option<i32>,
    /// nextPageToken value returned from a previous list call, indicating that the subsequent page of results should be returned. The list request must be otherwise identical to the one that resulted in this token.
    #[serde(rename = "pageToken")]
    pub page_token: Option<String>,
}

impl std::fmt::Display for CoursesCourseWorkListParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        if let Some(ref v) = self.course_work_states {
            write!(
                f,
                "&courseWorkStates={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.order_by {
            write!(
                f,
                "&orderBy={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.page_size {
            write!(
                f,
                "&pageSize={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.page_token {
            write!(
                f,
                "&pageToken={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `courseWork.modifyAssignees` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesCourseWorkModifyAssigneesParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "courseId")]
    pub course_id: String,
    /// Identifier of the coursework.
    #[serde(rename = "id")]
    pub id: String,
}

impl std::fmt::Display for CoursesCourseWorkModifyAssigneesParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `courseWork.patch` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesCourseWorkPatchParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "courseId")]
    pub course_id: String,
    /// Identifier of the course work.
    #[serde(rename = "id")]
    pub id: String,
    /// Mask that identifies which fields on the course work to update. This field is required to do an update. The update fails if invalid fields are specified. If a field supports empty values, it can be cleared by specifying it in the update mask and not in the CourseWork object. If a field that does not support empty values is included in the update mask and not set in the CourseWork object, an `INVALID_ARGUMENT` error is returned. The following fields may be specified by teachers: * `title` * `description` * `state` * `due_date` * `due_time` * `max_points` * `scheduled_time` * `submission_modification_mode` * `topic_id`
    #[serde(rename = "updateMask")]
    pub update_mask: Option<String>,
}

impl std::fmt::Display for CoursesCourseWorkPatchParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        if let Some(ref v) = self.update_mask {
            write!(
                f,
                "&updateMask={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `studentSubmissions.get` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesCourseWorkStudentSubmissionsGetParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "courseId")]
    pub course_id: String,
    /// Identifier of the course work.
    #[serde(rename = "courseWorkId")]
    pub course_work_id: String,
    /// Identifier of the student submission.
    #[serde(rename = "id")]
    pub id: String,
}

impl std::fmt::Display for CoursesCourseWorkStudentSubmissionsGetParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `studentSubmissions.list` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesCourseWorkStudentSubmissionsListParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "courseId")]
    pub course_id: String,
    /// Identifier of the student work to request. This may be set to the string literal `"-"` to request student work for all course work in the specified course.
    #[serde(rename = "courseWorkId")]
    pub course_work_id: String,
    /// Requested lateness value. If specified, returned student submissions are restricted by the requested value. If unspecified, submissions are returned regardless of `late` value.
    #[serde(rename = "late")]
    pub late: Option<StudentSubmissionsListLate>,
    /// Maximum number of items to return. Zero or unspecified indicates that the server may assign a maximum. The server may return fewer than the specified number of results.
    #[serde(rename = "pageSize")]
    pub page_size: Option<i32>,
    /// nextPageToken value returned from a previous list call, indicating that the subsequent page of results should be returned. The list request must be otherwise identical to the one that resulted in this token.
    #[serde(rename = "pageToken")]
    pub page_token: Option<String>,
    /// Requested submission states. If specified, returned student submissions match one of the specified submission states.
    #[serde(rename = "states")]
    pub states: Option<StudentSubmissionsListStates>,
    /// Optional argument to restrict returned student work to those owned by the student with the specified identifier. The identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user
    #[serde(rename = "userId")]
    pub user_id: Option<String>,
}

impl std::fmt::Display for CoursesCourseWorkStudentSubmissionsListParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        if let Some(ref v) = self.late {
            write!(
                f,
                "&late={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.page_size {
            write!(
                f,
                "&pageSize={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.page_token {
            write!(
                f,
                "&pageToken={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.states {
            write!(
                f,
                "&states={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.user_id {
            write!(
                f,
                "&userId={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `studentSubmissions.modifyAttachments` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesCourseWorkStudentSubmissionsModifyAttachmentsParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "courseId")]
    pub course_id: String,
    /// Identifier of the course work.
    #[serde(rename = "courseWorkId")]
    pub course_work_id: String,
    /// Identifier of the student submission.
    #[serde(rename = "id")]
    pub id: String,
}

impl std::fmt::Display for CoursesCourseWorkStudentSubmissionsModifyAttachmentsParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `studentSubmissions.patch` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesCourseWorkStudentSubmissionsPatchParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "courseId")]
    pub course_id: String,
    /// Identifier of the course work.
    #[serde(rename = "courseWorkId")]
    pub course_work_id: String,
    /// Identifier of the student submission.
    #[serde(rename = "id")]
    pub id: String,
    /// Mask that identifies which fields on the student submission to update. This field is required to do an update. The update fails if invalid fields are specified. The following fields may be specified by teachers: * `draft_grade` * `assigned_grade`
    #[serde(rename = "updateMask")]
    pub update_mask: Option<String>,
}

impl std::fmt::Display for CoursesCourseWorkStudentSubmissionsPatchParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        if let Some(ref v) = self.update_mask {
            write!(
                f,
                "&updateMask={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `studentSubmissions.reclaim` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesCourseWorkStudentSubmissionsReclaimParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "courseId")]
    pub course_id: String,
    /// Identifier of the course work.
    #[serde(rename = "courseWorkId")]
    pub course_work_id: String,
    /// Identifier of the student submission.
    #[serde(rename = "id")]
    pub id: String,
}

impl std::fmt::Display for CoursesCourseWorkStudentSubmissionsReclaimParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `studentSubmissions.return` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesCourseWorkStudentSubmissionsReturnParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "courseId")]
    pub course_id: String,
    /// Identifier of the course work.
    #[serde(rename = "courseWorkId")]
    pub course_work_id: String,
    /// Identifier of the student submission.
    #[serde(rename = "id")]
    pub id: String,
}

impl std::fmt::Display for CoursesCourseWorkStudentSubmissionsReturnParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `studentSubmissions.turnIn` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesCourseWorkStudentSubmissionsTurnInParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "courseId")]
    pub course_id: String,
    /// Identifier of the course work.
    #[serde(rename = "courseWorkId")]
    pub course_work_id: String,
    /// Identifier of the student submission.
    #[serde(rename = "id")]
    pub id: String,
}

impl std::fmt::Display for CoursesCourseWorkStudentSubmissionsTurnInParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `courseWorkMaterials.create` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesCourseWorkMaterialsCreateParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "courseId")]
    pub course_id: String,
}

impl std::fmt::Display for CoursesCourseWorkMaterialsCreateParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `courseWorkMaterials.delete` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesCourseWorkMaterialsDeleteParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "courseId")]
    pub course_id: String,
    /// Identifier of the course work material to delete. This identifier is a Classroom-assigned identifier.
    #[serde(rename = "id")]
    pub id: String,
}

impl std::fmt::Display for CoursesCourseWorkMaterialsDeleteParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `courseWorkMaterials.get` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesCourseWorkMaterialsGetParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "courseId")]
    pub course_id: String,
    /// Identifier of the course work material.
    #[serde(rename = "id")]
    pub id: String,
}

impl std::fmt::Display for CoursesCourseWorkMaterialsGetParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `courseWorkMaterials.list` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesCourseWorkMaterialsListParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "courseId")]
    pub course_id: String,
    /// Restriction on the work status to return. Only course work material that matches is returned. If unspecified, items with a work status of `PUBLISHED` is returned.
    #[serde(rename = "courseWorkMaterialStates")]
    pub course_work_material_states: Option<CourseWorkMaterialsListCourseWorkMaterialStates>,
    /// Optional filtering for course work material with at least one Drive material whose ID matches the provided string. If `material_link` is also specified, course work material must have materials matching both filters.
    #[serde(rename = "materialDriveId")]
    pub material_drive_id: Option<String>,
    /// Optional filtering for course work material with at least one link material whose URL partially matches the provided string.
    #[serde(rename = "materialLink")]
    pub material_link: Option<String>,
    /// Optional sort ordering for results. A comma-separated list of fields with an optional sort direction keyword. Supported field is `updateTime`. Supported direction keywords are `asc` and `desc`. If not specified, `updateTime desc` is the default behavior. Examples: `updateTime asc`, `updateTime`
    #[serde(rename = "orderBy")]
    pub order_by: Option<String>,
    /// Maximum number of items to return. Zero or unspecified indicates that the server may assign a maximum. The server may return fewer than the specified number of results.
    #[serde(rename = "pageSize")]
    pub page_size: Option<i32>,
    /// nextPageToken value returned from a previous list call, indicating that the subsequent page of results should be returned. The list request must be otherwise identical to the one that resulted in this token.
    #[serde(rename = "pageToken")]
    pub page_token: Option<String>,
}

impl std::fmt::Display for CoursesCourseWorkMaterialsListParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        if let Some(ref v) = self.course_work_material_states {
            write!(
                f,
                "&courseWorkMaterialStates={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.material_drive_id {
            write!(
                f,
                "&materialDriveId={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.material_link {
            write!(
                f,
                "&materialLink={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.order_by {
            write!(
                f,
                "&orderBy={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.page_size {
            write!(
                f,
                "&pageSize={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.page_token {
            write!(
                f,
                "&pageToken={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `courseWorkMaterials.patch` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesCourseWorkMaterialsPatchParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "courseId")]
    pub course_id: String,
    /// Identifier of the course work material.
    #[serde(rename = "id")]
    pub id: String,
    /// Mask that identifies which fields on the course work material to update. This field is required to do an update. The update fails if invalid fields are specified. If a field supports empty values, it can be cleared by specifying it in the update mask and not in the course work material object. If a field that does not support empty values is included in the update mask and not set in the course work material object, an `INVALID_ARGUMENT` error is returned. The following fields may be specified by teachers: * `title` * `description` * `state` * `scheduled_time` * `topic_id`
    #[serde(rename = "updateMask")]
    pub update_mask: Option<String>,
}

impl std::fmt::Display for CoursesCourseWorkMaterialsPatchParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        if let Some(ref v) = self.update_mask {
            write!(
                f,
                "&updateMask={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `students.create` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesStudentsCreateParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course to create the student in. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "courseId")]
    pub course_id: String,
    /// Enrollment code of the course to create the student in. This code is required if userId corresponds to the requesting user; it may be omitted if the requesting user has administrative permissions to create students for any user.
    #[serde(rename = "enrollmentCode")]
    pub enrollment_code: Option<String>,
}

impl std::fmt::Display for CoursesStudentsCreateParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        if let Some(ref v) = self.enrollment_code {
            write!(
                f,
                "&enrollmentCode={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `students.delete` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesStudentsDeleteParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "courseId")]
    pub course_id: String,
    /// Identifier of the student to delete. The identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user
    #[serde(rename = "userId")]
    pub user_id: String,
}

impl std::fmt::Display for CoursesStudentsDeleteParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `students.get` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesStudentsGetParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "courseId")]
    pub course_id: String,
    /// Identifier of the student to return. The identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user
    #[serde(rename = "userId")]
    pub user_id: String,
}

impl std::fmt::Display for CoursesStudentsGetParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `students.list` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesStudentsListParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "courseId")]
    pub course_id: String,
    /// Maximum number of items to return. The default is 30 if unspecified or `0`. The server may return fewer than the specified number of results.
    #[serde(rename = "pageSize")]
    pub page_size: Option<i32>,
    /// nextPageToken value returned from a previous list call, indicating that the subsequent page of results should be returned. The list request must be otherwise identical to the one that resulted in this token.
    #[serde(rename = "pageToken")]
    pub page_token: Option<String>,
}

impl std::fmt::Display for CoursesStudentsListParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        if let Some(ref v) = self.page_size {
            write!(
                f,
                "&pageSize={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.page_token {
            write!(
                f,
                "&pageToken={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `teachers.create` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesTeachersCreateParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "courseId")]
    pub course_id: String,
}

impl std::fmt::Display for CoursesTeachersCreateParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `teachers.delete` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesTeachersDeleteParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "courseId")]
    pub course_id: String,
    /// Identifier of the teacher to delete. The identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user
    #[serde(rename = "userId")]
    pub user_id: String,
}

impl std::fmt::Display for CoursesTeachersDeleteParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `teachers.get` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesTeachersGetParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "courseId")]
    pub course_id: String,
    /// Identifier of the teacher to return. The identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user
    #[serde(rename = "userId")]
    pub user_id: String,
}

impl std::fmt::Display for CoursesTeachersGetParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `teachers.list` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesTeachersListParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "courseId")]
    pub course_id: String,
    /// Maximum number of items to return. The default is 30 if unspecified or `0`. The server may return fewer than the specified number of results.
    #[serde(rename = "pageSize")]
    pub page_size: Option<i32>,
    /// nextPageToken value returned from a previous list call, indicating that the subsequent page of results should be returned. The list request must be otherwise identical to the one that resulted in this token.
    #[serde(rename = "pageToken")]
    pub page_token: Option<String>,
}

impl std::fmt::Display for CoursesTeachersListParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        if let Some(ref v) = self.page_size {
            write!(
                f,
                "&pageSize={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.page_token {
            write!(
                f,
                "&pageToken={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `topics.create` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesTopicsCreateParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "courseId")]
    pub course_id: String,
}

impl std::fmt::Display for CoursesTopicsCreateParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `topics.delete` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesTopicsDeleteParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "courseId")]
    pub course_id: String,
    /// Identifier of the topic to delete.
    #[serde(rename = "id")]
    pub id: String,
}

impl std::fmt::Display for CoursesTopicsDeleteParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `topics.get` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesTopicsGetParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course.
    #[serde(rename = "courseId")]
    pub course_id: String,
    /// Identifier of the topic.
    #[serde(rename = "id")]
    pub id: String,
}

impl std::fmt::Display for CoursesTopicsGetParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `topics.list` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesTopicsListParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "courseId")]
    pub course_id: String,
    /// Maximum number of items to return. Zero or unspecified indicates that the server may assign a maximum. The server may return fewer than the specified number of results.
    #[serde(rename = "pageSize")]
    pub page_size: Option<i32>,
    /// nextPageToken value returned from a previous list call, indicating that the subsequent page of results should be returned. The list request must be otherwise identical to the one that resulted in this token.
    #[serde(rename = "pageToken")]
    pub page_token: Option<String>,
}

impl std::fmt::Display for CoursesTopicsListParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        if let Some(ref v) = self.page_size {
            write!(
                f,
                "&pageSize={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.page_token {
            write!(
                f,
                "&pageToken={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `topics.patch` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CoursesTopicsPatchParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.
    #[serde(rename = "courseId")]
    pub course_id: String,
    /// Identifier of the topic.
    #[serde(rename = "id")]
    pub id: String,
    /// Mask that identifies which fields on the topic to update. This field is required to do an update. The update fails if invalid fields are specified. If a field supports empty values, it can be cleared by specifying it in the update mask and not in the Topic object. If a field that does not support empty values is included in the update mask and not set in the Topic object, an `INVALID_ARGUMENT` error is returned. The following fields may be specified: * `name`
    #[serde(rename = "updateMask")]
    pub update_mask: Option<String>,
}

impl std::fmt::Display for CoursesTopicsPatchParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        if let Some(ref v) = self.update_mask {
            write!(
                f,
                "&updateMask={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `invitations.accept` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct InvitationsAcceptParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the invitation to accept.
    #[serde(rename = "id")]
    pub id: String,
}

impl std::fmt::Display for InvitationsAcceptParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `invitations.create` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct InvitationsCreateParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
}

impl std::fmt::Display for InvitationsCreateParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `invitations.delete` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct InvitationsDeleteParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the invitation to delete.
    #[serde(rename = "id")]
    pub id: String,
}

impl std::fmt::Display for InvitationsDeleteParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `invitations.get` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct InvitationsGetParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the invitation to return.
    #[serde(rename = "id")]
    pub id: String,
}

impl std::fmt::Display for InvitationsGetParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `invitations.list` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct InvitationsListParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Restricts returned invitations to those for a course with the specified identifier.
    #[serde(rename = "courseId")]
    pub course_id: Option<String>,
    /// Maximum number of items to return. The default is 500 if unspecified or `0`. The server may return fewer than the specified number of results.
    #[serde(rename = "pageSize")]
    pub page_size: Option<i32>,
    /// nextPageToken value returned from a previous list call, indicating that the subsequent page of results should be returned. The list request must be otherwise identical to the one that resulted in this token.
    #[serde(rename = "pageToken")]
    pub page_token: Option<String>,
    /// Restricts returned invitations to those for a specific user. The identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user
    #[serde(rename = "userId")]
    pub user_id: Option<String>,
}

impl std::fmt::Display for InvitationsListParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        if let Some(ref v) = self.course_id {
            write!(
                f,
                "&courseId={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.page_size {
            write!(
                f,
                "&pageSize={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.page_token {
            write!(
                f,
                "&pageToken={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.user_id {
            write!(
                f,
                "&userId={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `registrations.create` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct RegistrationsCreateParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
}

impl std::fmt::Display for RegistrationsCreateParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `registrations.delete` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct RegistrationsDeleteParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// The `registration_id` of the `Registration` to be deleted.
    #[serde(rename = "registrationId")]
    pub registration_id: String,
}

impl std::fmt::Display for RegistrationsDeleteParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `userProfiles.get` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct UserProfilesGetParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Identifier of the profile to return. The identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user
    #[serde(rename = "userId")]
    pub user_id: String,
}

impl std::fmt::Display for UserProfilesGetParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `guardianInvitations.create` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct UserProfilesGuardianInvitationsCreateParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// ID of the student (in standard format)
    #[serde(rename = "studentId")]
    pub student_id: String,
}

impl std::fmt::Display for UserProfilesGuardianInvitationsCreateParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `guardianInvitations.get` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct UserProfilesGuardianInvitationsGetParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// The `id` field of the `GuardianInvitation` being requested.
    #[serde(rename = "invitationId")]
    pub invitation_id: String,
    /// The ID of the student whose guardian invitation is being requested.
    #[serde(rename = "studentId")]
    pub student_id: String,
}

impl std::fmt::Display for UserProfilesGuardianInvitationsGetParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `guardianInvitations.list` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct UserProfilesGuardianInvitationsListParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// If specified, only results with the specified `invited_email_address` are returned.
    #[serde(rename = "invitedEmailAddress")]
    pub invited_email_address: Option<String>,
    /// Maximum number of items to return. Zero or unspecified indicates that the server may assign a maximum. The server may return fewer than the specified number of results.
    #[serde(rename = "pageSize")]
    pub page_size: Option<i32>,
    /// nextPageToken value returned from a previous list call, indicating that the subsequent page of results should be returned. The list request must be otherwise identical to the one that resulted in this token.
    #[serde(rename = "pageToken")]
    pub page_token: Option<String>,
    /// If specified, only results with the specified `state` values are returned. Otherwise, results with a `state` of `PENDING` are returned.
    #[serde(rename = "states")]
    pub states: Option<GuardianInvitationsListStates>,
    /// The ID of the student whose guardian invitations are to be returned. The identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user * the string literal `"-"`, indicating that results should be returned for all students that the requesting user is permitted to view guardian invitations.
    #[serde(rename = "studentId")]
    pub student_id: String,
}

impl std::fmt::Display for UserProfilesGuardianInvitationsListParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        if let Some(ref v) = self.invited_email_address {
            write!(
                f,
                "&invitedEmailAddress={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.page_size {
            write!(
                f,
                "&pageSize={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.page_token {
            write!(
                f,
                "&pageToken={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.states {
            write!(
                f,
                "&states={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `guardianInvitations.patch` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct UserProfilesGuardianInvitationsPatchParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// The `id` field of the `GuardianInvitation` to be modified.
    #[serde(rename = "invitationId")]
    pub invitation_id: String,
    /// The ID of the student whose guardian invitation is to be modified.
    #[serde(rename = "studentId")]
    pub student_id: String,
    /// Mask that identifies which fields on the course to update. This field is required to do an update. The update fails if invalid fields are specified. The following fields are valid: * `state` When set in a query parameter, this field should be specified as `updateMask=,,...`
    #[serde(rename = "updateMask")]
    pub update_mask: Option<String>,
}

impl std::fmt::Display for UserProfilesGuardianInvitationsPatchParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        if let Some(ref v) = self.update_mask {
            write!(
                f,
                "&updateMask={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `guardians.delete` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct UserProfilesGuardiansDeleteParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// The `id` field from a `Guardian`.
    #[serde(rename = "guardianId")]
    pub guardian_id: String,
    /// The student whose guardian is to be deleted. One of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user
    #[serde(rename = "studentId")]
    pub student_id: String,
}

impl std::fmt::Display for UserProfilesGuardiansDeleteParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `guardians.get` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct UserProfilesGuardiansGetParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// The `id` field from a `Guardian`.
    #[serde(rename = "guardianId")]
    pub guardian_id: String,
    /// The student whose guardian is being requested. One of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user
    #[serde(rename = "studentId")]
    pub student_id: String,
}

impl std::fmt::Display for UserProfilesGuardiansGetParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        Ok(())
    }
}

/// Parameters for the `guardians.list` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct UserProfilesGuardiansListParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub classroom_params: Option<ClassroomParams>,
    /// Filter results by the email address that the original invitation was sent to, resulting in this guardian link. This filter can only be used by domain administrators.
    #[serde(rename = "invitedEmailAddress")]
    pub invited_email_address: Option<String>,
    /// Maximum number of items to return. Zero or unspecified indicates that the server may assign a maximum. The server may return fewer than the specified number of results.
    #[serde(rename = "pageSize")]
    pub page_size: Option<i32>,
    /// nextPageToken value returned from a previous list call, indicating that the subsequent page of results should be returned. The list request must be otherwise identical to the one that resulted in this token.
    #[serde(rename = "pageToken")]
    pub page_token: Option<String>,
    /// Filter results by the student who the guardian is linked to. The identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user * the string literal `"-"`, indicating that results should be returned for all students that the requesting user has access to view.
    #[serde(rename = "studentId")]
    pub student_id: String,
}

impl std::fmt::Display for UserProfilesGuardiansListParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        if let Some(ref v) = self.invited_email_address {
            write!(
                f,
                "&invitedEmailAddress={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.page_size {
            write!(
                f,
                "&pageSize={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.page_token {
            write!(
                f,
                "&pageToken={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ClassroomParams {
    /// V1 error format.
    #[serde(rename = "$.xgafv")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub dollar_xgafv: Option<ClassroomParamsdollar_xgafv>,
    /// OAuth access token.
    #[serde(rename = "access_token")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub access_token: Option<String>,
    /// Data format for response.
    #[serde(rename = "alt")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub alt: Option<ClassroomParamsAlt>,
    /// JSONP
    #[serde(rename = "callback")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub callback: Option<String>,
    /// Selector specifying which fields to include in a partial response.
    #[serde(rename = "fields")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub fields: Option<String>,
    /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// OAuth 2.0 token for the current user.
    #[serde(rename = "oauth_token")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub oauth_token: Option<String>,
    /// Returns response with indentations and line breaks.
    #[serde(rename = "prettyPrint")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub pretty_print: Option<bool>,
    /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    #[serde(rename = "quotaUser")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub quota_user: Option<String>,
    /// Legacy upload protocol for media (e.g. "media", "multipart").
    #[serde(rename = "uploadType")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub upload_type: Option<String>,
    /// Upload protocol for media (e.g. "raw", "multipart").
    #[serde(rename = "upload_protocol")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub upload_protocol: Option<String>,
}

impl std::fmt::Display for ClassroomParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        if let Some(ref v) = self.dollar_xgafv {
            write!(
                f,
                "&$.xgafv={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.access_token {
            write!(
                f,
                "&access_token={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.alt {
            write!(
                f,
                "&alt={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.callback {
            write!(
                f,
                "&callback={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.fields {
            write!(
                f,
                "&fields={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.key {
            write!(
                f,
                "&key={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.oauth_token {
            write!(
                f,
                "&oauth_token={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.pretty_print {
            write!(
                f,
                "&prettyPrint={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.quota_user {
            write!(
                f,
                "&quotaUser={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.upload_type {
            write!(
                f,
                "&uploadType={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.upload_protocol {
            write!(
                f,
                "&upload_protocol={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// The Classroom Courses service represents the Courses resource.
pub struct CoursesService {
    client: TlsClient,
    authenticator: Box<dyn 'static + DerefAuth>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl CoursesService {
    /// Create a new CoursesService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Arc`: `new(client.clone(), Arc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + DerefAuth>(client: TlsClient, auth: A) -> CoursesService {
        CoursesService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://classroom.googleapis.com/".into(),
            root_url: "https://classroom.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of ClassroomScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Creates a course. The user specified in `ownerId` is the owner of the created course and added as a teacher. A non-admin requesting user can only create a course with themselves as the owner. Domain admins can create courses owned by any user within their domain. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to create courses or for access errors. * `NOT_FOUND` if the primary teacher is not a valid user. * `FAILED_PRECONDITION` if the course owner's account is disabled or for the following request errors: * UserCannotOwnCourse * UserGroupsMembershipLimitReached * `ALREADY_EXISTS` if an alias was specified in the `id` and already exists.
    pub async fn create(&self, params: &CoursesCreateParams, req: &Course) -> Result<Course> {
        let rel_path = format!("v1/courses",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomCourses.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }

    /// Deletes a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to delete the requested course or for access errors. * `NOT_FOUND` if no course exists with the requested ID.
    pub async fn delete(&self, params: &CoursesDeleteParams) -> Result<Empty> {
        let rel_path = format!(
            "v1/courses/{id}",
            id = percent_encode(format!("{}", params.id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomCourses.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "DELETE", opt_request).await
    }

    /// Returns a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or for access errors. * `NOT_FOUND` if no course exists with the requested ID.
    pub async fn get(&self, params: &CoursesGetParams) -> Result<Course> {
        let rel_path = format!(
            "v1/courses/{id}",
            id = percent_encode(format!("{}", params.id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomCoursesReadonly
                .as_ref()
                .to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }

    /// Returns a list of courses that the requesting user is permitted to view, restricted to those that match the request. Returned courses are ordered by creation time, with the most recently created coming first. This method returns the following error codes: * `PERMISSION_DENIED` for access errors. * `INVALID_ARGUMENT` if the query argument is malformed. * `NOT_FOUND` if any users specified in the query arguments do not exist.
    pub async fn list(&self, params: &CoursesListParams) -> Result<ListCoursesResponse> {
        let rel_path = format!("v1/courses",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomCoursesReadonly
                .as_ref()
                .to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }

    /// Updates one or more fields in a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to modify the requested course or for access errors. * `NOT_FOUND` if no course exists with the requested ID. * `INVALID_ARGUMENT` if invalid fields are specified in the update mask or if no update mask is supplied. * `FAILED_PRECONDITION` for the following request errors: * CourseNotModifiable * InactiveCourseOwner * IneligibleOwner
    pub async fn patch(&self, params: &CoursesPatchParams, req: &Course) -> Result<Course> {
        let rel_path = format!(
            "v1/courses/{id}",
            id = percent_encode(format!("{}", params.id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomCourses.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "PATCH", opt_request).await
    }

    /// Updates a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to modify the requested course or for access errors. * `NOT_FOUND` if no course exists with the requested ID. * `FAILED_PRECONDITION` for the following request errors: * CourseNotModifiable
    pub async fn update(&self, params: &CoursesUpdateParams, req: &Course) -> Result<Course> {
        let rel_path = format!(
            "v1/courses/{id}",
            id = percent_encode(format!("{}", params.id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomCourses.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "PUT", opt_request).await
    }
}

/// The Classroom CoursesAliases service represents the CoursesAliases resource.
pub struct CoursesAliasesService {
    client: TlsClient,
    authenticator: Box<dyn 'static + DerefAuth>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl CoursesAliasesService {
    /// Create a new CoursesAliasesService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Arc`: `new(client.clone(), Arc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + DerefAuth>(client: TlsClient, auth: A) -> CoursesAliasesService {
        CoursesAliasesService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://classroom.googleapis.com/".into(),
            root_url: "https://classroom.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of ClassroomScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Creates an alias for a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to create the alias or for access errors. * `NOT_FOUND` if the course does not exist. * `ALREADY_EXISTS` if the alias already exists. * `FAILED_PRECONDITION` if the alias requested does not make sense for the requesting user or course (for example, if a user not in a domain attempts to access a domain-scoped alias).
    pub async fn create(
        &self,
        params: &CoursesAliasesCreateParams,
        req: &CourseAlias,
    ) -> Result<CourseAlias> {
        let rel_path = format!(
            "v1/courses/{courseId}/aliases",
            courseId = percent_encode(format!("{}", params.course_id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomCourses.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }

    /// Deletes an alias of a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to remove the alias or for access errors. * `NOT_FOUND` if the alias does not exist. * `FAILED_PRECONDITION` if the alias requested does not make sense for the requesting user or course (for example, if a user not in a domain attempts to delete a domain-scoped alias).
    pub async fn delete(&self, params: &CoursesAliasesDeleteParams) -> Result<Empty> {
        let rel_path = format!(
            "v1/courses/{courseId}/aliases/{alias}",
            courseId = percent_encode(format!("{}", params.course_id).as_bytes(), NON_ALPHANUMERIC),
            alias = percent_encode(format!("{}", params.alias).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomCourses.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "DELETE", opt_request).await
    }

    /// Returns a list of aliases for a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the course or for access errors. * `NOT_FOUND` if the course does not exist.
    pub async fn list(
        &self,
        params: &CoursesAliasesListParams,
    ) -> Result<ListCourseAliasesResponse> {
        let rel_path = format!(
            "v1/courses/{courseId}/aliases",
            courseId = percent_encode(format!("{}", params.course_id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomCoursesReadonly
                .as_ref()
                .to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }
}

/// The Classroom CoursesAnnouncements service represents the CoursesAnnouncements resource.
pub struct CoursesAnnouncementsService {
    client: TlsClient,
    authenticator: Box<dyn 'static + DerefAuth>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl CoursesAnnouncementsService {
    /// Create a new CoursesAnnouncementsService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Arc`: `new(client.clone(), Arc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + DerefAuth>(client: TlsClient, auth: A) -> CoursesAnnouncementsService {
        CoursesAnnouncementsService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://classroom.googleapis.com/".into(),
            root_url: "https://classroom.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of ClassroomScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Creates an announcement. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course, create announcements in the requested course, share a Drive attachment, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course does not exist. * `FAILED_PRECONDITION` for the following request error: * AttachmentNotVisible
    pub async fn create(
        &self,
        params: &CoursesAnnouncementsCreateParams,
        req: &Announcement,
    ) -> Result<Announcement> {
        let rel_path = format!(
            "v1/courses/{courseId}/announcements",
            courseId = percent_encode(format!("{}", params.course_id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomAnnouncements.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }

    /// Deletes an announcement. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding announcement item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting developer project did not create the corresponding announcement, if the requesting user is not permitted to delete the requested course or for access errors. * `FAILED_PRECONDITION` if the requested announcement has already been deleted. * `NOT_FOUND` if no course exists with the requested ID.
    pub async fn delete(&self, params: &CoursesAnnouncementsDeleteParams) -> Result<Empty> {
        let rel_path = format!(
            "v1/courses/{courseId}/announcements/{id}",
            courseId = percent_encode(format!("{}", params.course_id).as_bytes(), NON_ALPHANUMERIC),
            id = percent_encode(format!("{}", params.id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomAnnouncements.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "DELETE", opt_request).await
    }

    /// Returns an announcement. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or announcement, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course or announcement does not exist.
    pub async fn get(&self, params: &CoursesAnnouncementsGetParams) -> Result<Announcement> {
        let rel_path = format!(
            "v1/courses/{courseId}/announcements/{id}",
            courseId = percent_encode(format!("{}", params.course_id).as_bytes(), NON_ALPHANUMERIC),
            id = percent_encode(format!("{}", params.id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomAnnouncementsReadonly
                .as_ref()
                .to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }

    /// Returns a list of announcements that the requester is permitted to view. Course students may only view `PUBLISHED` announcements. Course teachers and domain administrators may view all announcements. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course does not exist.
    pub async fn list(
        &self,
        params: &CoursesAnnouncementsListParams,
    ) -> Result<ListAnnouncementsResponse> {
        let rel_path = format!(
            "v1/courses/{courseId}/announcements",
            courseId = percent_encode(format!("{}", params.course_id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomAnnouncementsReadonly
                .as_ref()
                .to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }

    /// Modifies assignee mode and options of an announcement. Only a teacher of the course that contains the announcement may call this method. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course or course work does not exist.
    pub async fn modify_assignees(
        &self,
        params: &CoursesAnnouncementsModifyAssigneesParams,
        req: &ModifyAnnouncementAssigneesRequest,
    ) -> Result<Announcement> {
        let rel_path = format!(
            "v1/courses/{courseId}/announcements/{id}:modifyAssignees",
            courseId = percent_encode(format!("{}", params.course_id).as_bytes(), NON_ALPHANUMERIC),
            id = percent_encode(format!("{}", params.id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomAnnouncements.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }

    /// Updates one or more fields of an announcement. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting developer project did not create the corresponding announcement or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `FAILED_PRECONDITION` if the requested announcement has already been deleted. * `NOT_FOUND` if the requested course or announcement does not exist
    pub async fn patch(
        &self,
        params: &CoursesAnnouncementsPatchParams,
        req: &Announcement,
    ) -> Result<Announcement> {
        let rel_path = format!(
            "v1/courses/{courseId}/announcements/{id}",
            courseId = percent_encode(format!("{}", params.course_id).as_bytes(), NON_ALPHANUMERIC),
            id = percent_encode(format!("{}", params.id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomAnnouncements.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "PATCH", opt_request).await
    }
}

/// The Classroom CoursesCourseWork service represents the CoursesCourseWork resource.
pub struct CoursesCourseWorkService {
    client: TlsClient,
    authenticator: Box<dyn 'static + DerefAuth>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl CoursesCourseWorkService {
    /// Create a new CoursesCourseWorkService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Arc`: `new(client.clone(), Arc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + DerefAuth>(client: TlsClient, auth: A) -> CoursesCourseWorkService {
        CoursesCourseWorkService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://classroom.googleapis.com/".into(),
            root_url: "https://classroom.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of ClassroomScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Creates course work. The resulting course work (and corresponding student submissions) are associated with the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to make the request. Classroom API requests to modify course work and student submissions must be made with an OAuth client ID from the associated Developer Console project. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course, create course work in the requested course, share a Drive attachment, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course does not exist. * `FAILED_PRECONDITION` for the following request error: * AttachmentNotVisible
    pub async fn create(
        &self,
        params: &CoursesCourseWorkCreateParams,
        req: &CourseWork,
    ) -> Result<CourseWork> {
        let rel_path = format!(
            "v1/courses/{courseId}/courseWork",
            courseId = percent_encode(format!("{}", params.course_id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomCourseworkStudents
                .as_ref()
                .to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }

    /// Deletes a course work. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting developer project did not create the corresponding course work, if the requesting user is not permitted to delete the requested course or for access errors. * `FAILED_PRECONDITION` if the requested course work has already been deleted. * `NOT_FOUND` if no course exists with the requested ID.
    pub async fn delete(&self, params: &CoursesCourseWorkDeleteParams) -> Result<Empty> {
        let rel_path = format!(
            "v1/courses/{courseId}/courseWork/{id}",
            courseId = percent_encode(format!("{}", params.course_id).as_bytes(), NON_ALPHANUMERIC),
            id = percent_encode(format!("{}", params.id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomCourseworkStudents
                .as_ref()
                .to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "DELETE", opt_request).await
    }

    /// Returns course work. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course or course work does not exist.
    pub async fn get(&self, params: &CoursesCourseWorkGetParams) -> Result<CourseWork> {
        let rel_path = format!(
            "v1/courses/{courseId}/courseWork/{id}",
            courseId = percent_encode(format!("{}", params.course_id).as_bytes(), NON_ALPHANUMERIC),
            id = percent_encode(format!("{}", params.id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomCourseworkStudentsReadonly
                .as_ref()
                .to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }

    /// Returns a list of course work that the requester is permitted to view. Course students may only view `PUBLISHED` course work. Course teachers and domain administrators may view all course work. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course does not exist.
    pub async fn list(
        &self,
        params: &CoursesCourseWorkListParams,
    ) -> Result<ListCourseWorkResponse> {
        let rel_path = format!(
            "v1/courses/{courseId}/courseWork",
            courseId = percent_encode(format!("{}", params.course_id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomCourseworkStudentsReadonly
                .as_ref()
                .to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }

    /// Modifies assignee mode and options of a coursework. Only a teacher of the course that contains the coursework may call this method. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course or course work does not exist.
    pub async fn modify_assignees(
        &self,
        params: &CoursesCourseWorkModifyAssigneesParams,
        req: &ModifyCourseWorkAssigneesRequest,
    ) -> Result<CourseWork> {
        let rel_path = format!(
            "v1/courses/{courseId}/courseWork/{id}:modifyAssignees",
            courseId = percent_encode(format!("{}", params.course_id).as_bytes(), NON_ALPHANUMERIC),
            id = percent_encode(format!("{}", params.id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomCourseworkStudents
                .as_ref()
                .to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }

    /// Updates one or more fields of a course work. See google.classroom.v1.CourseWork for details of which fields may be updated and who may change them. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting developer project did not create the corresponding course work, if the user is not permitted to make the requested modification to the student submission, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `FAILED_PRECONDITION` if the requested course work has already been deleted. * `NOT_FOUND` if the requested course, course work, or student submission does not exist.
    pub async fn patch(
        &self,
        params: &CoursesCourseWorkPatchParams,
        req: &CourseWork,
    ) -> Result<CourseWork> {
        let rel_path = format!(
            "v1/courses/{courseId}/courseWork/{id}",
            courseId = percent_encode(format!("{}", params.course_id).as_bytes(), NON_ALPHANUMERIC),
            id = percent_encode(format!("{}", params.id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomCourseworkStudents
                .as_ref()
                .to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "PATCH", opt_request).await
    }
}

/// The Classroom CoursesCourseWorkStudentSubmissions service represents the CoursesCourseWorkStudentSubmissions resource.
pub struct CoursesCourseWorkStudentSubmissionsService {
    client: TlsClient,
    authenticator: Box<dyn 'static + DerefAuth>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl CoursesCourseWorkStudentSubmissionsService {
    /// Create a new CoursesCourseWorkStudentSubmissionsService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Arc`: `new(client.clone(), Arc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + DerefAuth>(
        client: TlsClient,
        auth: A,
    ) -> CoursesCourseWorkStudentSubmissionsService {
        CoursesCourseWorkStudentSubmissionsService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://classroom.googleapis.com/".into(),
            root_url: "https://classroom.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of ClassroomScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Returns a student submission. * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course, course work, or student submission or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course, course work, or student submission does not exist.
    pub async fn get(
        &self,
        params: &CoursesCourseWorkStudentSubmissionsGetParams,
    ) -> Result<StudentSubmission> {
        let rel_path = format!(
            "v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}",
            courseId = percent_encode(format!("{}", params.course_id).as_bytes(), NON_ALPHANUMERIC),
            courseWorkId = percent_encode(
                format!("{}", params.course_work_id).as_bytes(),
                NON_ALPHANUMERIC
            ),
            id = percent_encode(format!("{}", params.id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomStudentSubmissionsStudentsReadonly
                .as_ref()
                .to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }

    /// Returns a list of student submissions that the requester is permitted to view, factoring in the OAuth scopes of the request. `-` may be specified as the `course_work_id` to include student submissions for multiple course work items. Course students may only view their own work. Course teachers and domain administrators may view all student submissions. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course does not exist.
    pub async fn list(
        &self,
        params: &CoursesCourseWorkStudentSubmissionsListParams,
    ) -> Result<ListStudentSubmissionsResponse> {
        let rel_path = format!(
            "v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions",
            courseId = percent_encode(format!("{}", params.course_id).as_bytes(), NON_ALPHANUMERIC),
            courseWorkId = percent_encode(
                format!("{}", params.course_work_id).as_bytes(),
                NON_ALPHANUMERIC
            )
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomStudentSubmissionsStudentsReadonly
                .as_ref()
                .to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }

    /// Modifies attachments of student submission. Attachments may only be added to student submissions belonging to course work objects with a `workType` of `ASSIGNMENT`. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work, if the user is not permitted to modify attachments on the requested student submission, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course, course work, or student submission does not exist.
    pub async fn modify_attachments(
        &self,
        params: &CoursesCourseWorkStudentSubmissionsModifyAttachmentsParams,
        req: &ModifyAttachmentsRequest,
    ) -> Result<StudentSubmission> {
        let rel_path = format!("v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:modifyAttachments", courseId=percent_encode(format!("{}", params.course_id).as_bytes(), NON_ALPHANUMERIC),courseWorkId=percent_encode(format!("{}", params.course_work_id).as_bytes(), NON_ALPHANUMERIC),id=percent_encode(format!("{}", params.id).as_bytes(), NON_ALPHANUMERIC));
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomCourseworkStudents
                .as_ref()
                .to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }

    /// Updates one or more fields of a student submission. See google.classroom.v1.StudentSubmission for details of which fields may be updated and who may change them. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting developer project did not create the corresponding course work, if the user is not permitted to make the requested modification to the student submission, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course, course work, or student submission does not exist.
    pub async fn patch(
        &self,
        params: &CoursesCourseWorkStudentSubmissionsPatchParams,
        req: &StudentSubmission,
    ) -> Result<StudentSubmission> {
        let rel_path = format!(
            "v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}",
            courseId = percent_encode(format!("{}", params.course_id).as_bytes(), NON_ALPHANUMERIC),
            courseWorkId = percent_encode(
                format!("{}", params.course_work_id).as_bytes(),
                NON_ALPHANUMERIC
            ),
            id = percent_encode(format!("{}", params.id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomCourseworkStudents
                .as_ref()
                .to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "PATCH", opt_request).await
    }

    /// Reclaims a student submission on behalf of the student that owns it. Reclaiming a student submission transfers ownership of attached Drive files to the student and updates the submission state. Only the student that owns the requested student submission may call this method, and only for a student submission that has been turned in. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work, unsubmit the requested student submission, or for access errors. * `FAILED_PRECONDITION` if the student submission has not been turned in. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course, course work, or student submission does not exist.
    pub async fn reclaim(
        &self,
        params: &CoursesCourseWorkStudentSubmissionsReclaimParams,
        req: &ReclaimStudentSubmissionRequest,
    ) -> Result<Empty> {
        let rel_path = format!(
            "v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:reclaim",
            courseId = percent_encode(format!("{}", params.course_id).as_bytes(), NON_ALPHANUMERIC),
            courseWorkId = percent_encode(
                format!("{}", params.course_work_id).as_bytes(),
                NON_ALPHANUMERIC
            ),
            id = percent_encode(format!("{}", params.id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomCourseworkMe.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }

    /// Returns a student submission. Returning a student submission transfers ownership of attached Drive files to the student and may also update the submission state. Unlike the Classroom application, returning a student submission does not set assignedGrade to the draftGrade value. Only a teacher of the course that contains the requested student submission may call this method. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work, return the requested student submission, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course, course work, or student submission does not exist.
    pub async fn return_(
        &self,
        params: &CoursesCourseWorkStudentSubmissionsReturnParams,
        req: &ReturnStudentSubmissionRequest,
    ) -> Result<Empty> {
        let rel_path = format!(
            "v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:return",
            courseId = percent_encode(format!("{}", params.course_id).as_bytes(), NON_ALPHANUMERIC),
            courseWorkId = percent_encode(
                format!("{}", params.course_work_id).as_bytes(),
                NON_ALPHANUMERIC
            ),
            id = percent_encode(format!("{}", params.id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomCourseworkStudents
                .as_ref()
                .to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }

    /// Turns in a student submission. Turning in a student submission transfers ownership of attached Drive files to the teacher and may also update the submission state. This may only be called by the student that owns the specified student submission. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work, turn in the requested student submission, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course, course work, or student submission does not exist.
    pub async fn turn_in(
        &self,
        params: &CoursesCourseWorkStudentSubmissionsTurnInParams,
        req: &TurnInStudentSubmissionRequest,
    ) -> Result<Empty> {
        let rel_path = format!(
            "v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:turnIn",
            courseId = percent_encode(format!("{}", params.course_id).as_bytes(), NON_ALPHANUMERIC),
            courseWorkId = percent_encode(
                format!("{}", params.course_work_id).as_bytes(),
                NON_ALPHANUMERIC
            ),
            id = percent_encode(format!("{}", params.id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomCourseworkMe.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }
}

/// The Classroom CoursesCourseWorkMaterials service represents the CoursesCourseWorkMaterials resource.
pub struct CoursesCourseWorkMaterialsService {
    client: TlsClient,
    authenticator: Box<dyn 'static + DerefAuth>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl CoursesCourseWorkMaterialsService {
    /// Create a new CoursesCourseWorkMaterialsService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Arc`: `new(client.clone(), Arc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + DerefAuth>(
        client: TlsClient,
        auth: A,
    ) -> CoursesCourseWorkMaterialsService {
        CoursesCourseWorkMaterialsService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://classroom.googleapis.com/".into(),
            root_url: "https://classroom.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of ClassroomScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Creates a course work material. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course, create course work material in the requested course, share a Drive attachment, or for access errors. * `INVALID_ARGUMENT` if the request is malformed or if more than 20 * materials are provided. * `NOT_FOUND` if the requested course does not exist. * `FAILED_PRECONDITION` for the following request error: * AttachmentNotVisible
    pub async fn create(
        &self,
        params: &CoursesCourseWorkMaterialsCreateParams,
        req: &CourseWorkMaterial,
    ) -> Result<CourseWorkMaterial> {
        let rel_path = format!(
            "v1/courses/{courseId}/courseWorkMaterials",
            courseId = percent_encode(format!("{}", params.course_id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomCourseworkmaterials
                .as_ref()
                .to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }

    /// Deletes a course work material. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work material item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting developer project did not create the corresponding course work material, if the requesting user is not permitted to delete the requested course or for access errors. * `FAILED_PRECONDITION` if the requested course work material has already been deleted. * `NOT_FOUND` if no course exists with the requested ID.
    pub async fn delete(&self, params: &CoursesCourseWorkMaterialsDeleteParams) -> Result<Empty> {
        let rel_path = format!(
            "v1/courses/{courseId}/courseWorkMaterials/{id}",
            courseId = percent_encode(format!("{}", params.course_id).as_bytes(), NON_ALPHANUMERIC),
            id = percent_encode(format!("{}", params.id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomCourseworkmaterials
                .as_ref()
                .to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "DELETE", opt_request).await
    }

    /// Returns a course work material. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work material, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course or course work material does not exist.
    pub async fn get(
        &self,
        params: &CoursesCourseWorkMaterialsGetParams,
    ) -> Result<CourseWorkMaterial> {
        let rel_path = format!(
            "v1/courses/{courseId}/courseWorkMaterials/{id}",
            courseId = percent_encode(format!("{}", params.course_id).as_bytes(), NON_ALPHANUMERIC),
            id = percent_encode(format!("{}", params.id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomCourseworkmaterialsReadonly
                .as_ref()
                .to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }

    /// Returns a list of course work material that the requester is permitted to view. Course students may only view `PUBLISHED` course work material. Course teachers and domain administrators may view all course work material. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course does not exist.
    pub async fn list(
        &self,
        params: &CoursesCourseWorkMaterialsListParams,
    ) -> Result<ListCourseWorkMaterialResponse> {
        let rel_path = format!(
            "v1/courses/{courseId}/courseWorkMaterials",
            courseId = percent_encode(format!("{}", params.course_id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomCourseworkmaterialsReadonly
                .as_ref()
                .to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }

    /// Updates one or more fields of a course work material. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting developer project for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `FAILED_PRECONDITION` if the requested course work material has already been deleted. * `NOT_FOUND` if the requested course or course work material does not exist
    pub async fn patch(
        &self,
        params: &CoursesCourseWorkMaterialsPatchParams,
        req: &CourseWorkMaterial,
    ) -> Result<CourseWorkMaterial> {
        let rel_path = format!(
            "v1/courses/{courseId}/courseWorkMaterials/{id}",
            courseId = percent_encode(format!("{}", params.course_id).as_bytes(), NON_ALPHANUMERIC),
            id = percent_encode(format!("{}", params.id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomCourseworkmaterials
                .as_ref()
                .to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "PATCH", opt_request).await
    }
}

/// The Classroom CoursesStudents service represents the CoursesStudents resource.
pub struct CoursesStudentsService {
    client: TlsClient,
    authenticator: Box<dyn 'static + DerefAuth>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl CoursesStudentsService {
    /// Create a new CoursesStudentsService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Arc`: `new(client.clone(), Arc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + DerefAuth>(client: TlsClient, auth: A) -> CoursesStudentsService {
        CoursesStudentsService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://classroom.googleapis.com/".into(),
            root_url: "https://classroom.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of ClassroomScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Adds a user as a student of a course. Domain administrators are permitted to [directly add](https://developers.google.com/classroom/guides/manage-users) users within their domain as students to courses within their domain. Students are permitted to add themselves to a course using an enrollment code. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to create students in this course or for access errors. * `NOT_FOUND` if the requested course ID does not exist. * `FAILED_PRECONDITION` if the requested user's account is disabled, for the following request errors: * CourseMemberLimitReached * CourseNotModifiable * UserGroupsMembershipLimitReached * InactiveCourseOwner * `ALREADY_EXISTS` if the user is already a student or teacher in the course.
    pub async fn create(
        &self,
        params: &CoursesStudentsCreateParams,
        req: &Student,
    ) -> Result<Student> {
        let rel_path = format!(
            "v1/courses/{courseId}/students",
            courseId = percent_encode(format!("{}", params.course_id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomRosters.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }

    /// Deletes a student of a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to delete students of this course or for access errors. * `NOT_FOUND` if no student of this course has the requested ID or if the course does not exist.
    pub async fn delete(&self, params: &CoursesStudentsDeleteParams) -> Result<Empty> {
        let rel_path = format!(
            "v1/courses/{courseId}/students/{userId}",
            courseId = percent_encode(format!("{}", params.course_id).as_bytes(), NON_ALPHANUMERIC),
            userId = percent_encode(format!("{}", params.user_id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomRosters.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "DELETE", opt_request).await
    }

    /// Returns a student of a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to view students of this course or for access errors. * `NOT_FOUND` if no student of this course has the requested ID or if the course does not exist.
    pub async fn get(&self, params: &CoursesStudentsGetParams) -> Result<Student> {
        let rel_path = format!(
            "v1/courses/{courseId}/students/{userId}",
            courseId = percent_encode(format!("{}", params.course_id).as_bytes(), NON_ALPHANUMERIC),
            userId = percent_encode(format!("{}", params.user_id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomRostersReadonly
                .as_ref()
                .to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }

    /// Returns a list of students of this course that the requester is permitted to view. This method returns the following error codes: * `NOT_FOUND` if the course does not exist. * `PERMISSION_DENIED` for access errors.
    pub async fn list(&self, params: &CoursesStudentsListParams) -> Result<ListStudentsResponse> {
        let rel_path = format!(
            "v1/courses/{courseId}/students",
            courseId = percent_encode(format!("{}", params.course_id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomRostersReadonly
                .as_ref()
                .to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }
}

/// The Classroom CoursesTeachers service represents the CoursesTeachers resource.
pub struct CoursesTeachersService {
    client: TlsClient,
    authenticator: Box<dyn 'static + DerefAuth>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl CoursesTeachersService {
    /// Create a new CoursesTeachersService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Arc`: `new(client.clone(), Arc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + DerefAuth>(client: TlsClient, auth: A) -> CoursesTeachersService {
        CoursesTeachersService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://classroom.googleapis.com/".into(),
            root_url: "https://classroom.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of ClassroomScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Creates a teacher of a course. Domain administrators are permitted to [directly add](https://developers.google.com/classroom/guides/manage-users) users within their domain as teachers to courses within their domain. Non-admin users should send an Invitation instead. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to create teachers in this course or for access errors. * `NOT_FOUND` if the requested course ID does not exist. * `FAILED_PRECONDITION` if the requested user's account is disabled, for the following request errors: * CourseMemberLimitReached * CourseNotModifiable * CourseTeacherLimitReached * UserGroupsMembershipLimitReached * InactiveCourseOwner * `ALREADY_EXISTS` if the user is already a teacher or student in the course.
    pub async fn create(
        &self,
        params: &CoursesTeachersCreateParams,
        req: &Teacher,
    ) -> Result<Teacher> {
        let rel_path = format!(
            "v1/courses/{courseId}/teachers",
            courseId = percent_encode(format!("{}", params.course_id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomRosters.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }

    /// Removes the specified teacher from the specified course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to delete teachers of this course or for access errors. * `NOT_FOUND` if no teacher of this course has the requested ID or if the course does not exist. * `FAILED_PRECONDITION` if the requested ID belongs to the primary teacher of this course. * `FAILED_PRECONDITION` if the requested ID belongs to the owner of the course Drive folder. * `FAILED_PRECONDITION` if the course no longer has an active owner.
    pub async fn delete(&self, params: &CoursesTeachersDeleteParams) -> Result<Empty> {
        let rel_path = format!(
            "v1/courses/{courseId}/teachers/{userId}",
            courseId = percent_encode(format!("{}", params.course_id).as_bytes(), NON_ALPHANUMERIC),
            userId = percent_encode(format!("{}", params.user_id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomRosters.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "DELETE", opt_request).await
    }

    /// Returns a teacher of a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to view teachers of this course or for access errors. * `NOT_FOUND` if no teacher of this course has the requested ID or if the course does not exist.
    pub async fn get(&self, params: &CoursesTeachersGetParams) -> Result<Teacher> {
        let rel_path = format!(
            "v1/courses/{courseId}/teachers/{userId}",
            courseId = percent_encode(format!("{}", params.course_id).as_bytes(), NON_ALPHANUMERIC),
            userId = percent_encode(format!("{}", params.user_id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomRostersReadonly
                .as_ref()
                .to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }

    /// Returns a list of teachers of this course that the requester is permitted to view. This method returns the following error codes: * `NOT_FOUND` if the course does not exist. * `PERMISSION_DENIED` for access errors.
    pub async fn list(&self, params: &CoursesTeachersListParams) -> Result<ListTeachersResponse> {
        let rel_path = format!(
            "v1/courses/{courseId}/teachers",
            courseId = percent_encode(format!("{}", params.course_id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomRostersReadonly
                .as_ref()
                .to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }
}

/// The Classroom CoursesTopics service represents the CoursesTopics resource.
pub struct CoursesTopicsService {
    client: TlsClient,
    authenticator: Box<dyn 'static + DerefAuth>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl CoursesTopicsService {
    /// Create a new CoursesTopicsService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Arc`: `new(client.clone(), Arc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + DerefAuth>(client: TlsClient, auth: A) -> CoursesTopicsService {
        CoursesTopicsService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://classroom.googleapis.com/".into(),
            root_url: "https://classroom.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of ClassroomScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Creates a topic. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course, create a topic in the requested course, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course does not exist.
    pub async fn create(&self, params: &CoursesTopicsCreateParams, req: &Topic) -> Result<Topic> {
        let rel_path = format!(
            "v1/courses/{courseId}/topics",
            courseId = percent_encode(format!("{}", params.course_id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomTopics.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }

    /// Deletes a topic. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not allowed to delete the requested topic or for access errors. * `FAILED_PRECONDITION` if the requested topic has already been deleted. * `NOT_FOUND` if no course or topic exists with the requested ID.
    pub async fn delete(&self, params: &CoursesTopicsDeleteParams) -> Result<Empty> {
        let rel_path = format!(
            "v1/courses/{courseId}/topics/{id}",
            courseId = percent_encode(format!("{}", params.course_id).as_bytes(), NON_ALPHANUMERIC),
            id = percent_encode(format!("{}", params.id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomTopics.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "DELETE", opt_request).await
    }

    /// Returns a topic. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or topic, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course or topic does not exist.
    pub async fn get(&self, params: &CoursesTopicsGetParams) -> Result<Topic> {
        let rel_path = format!(
            "v1/courses/{courseId}/topics/{id}",
            courseId = percent_encode(format!("{}", params.course_id).as_bytes(), NON_ALPHANUMERIC),
            id = percent_encode(format!("{}", params.id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomTopicsReadonly
                .as_ref()
                .to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }

    /// Returns the list of topics that the requester is permitted to view. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course does not exist.
    pub async fn list(&self, params: &CoursesTopicsListParams) -> Result<ListTopicResponse> {
        let rel_path = format!(
            "v1/courses/{courseId}/topics",
            courseId = percent_encode(format!("{}", params.course_id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomTopicsReadonly
                .as_ref()
                .to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }

    /// Updates one or more fields of a topic. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting developer project did not create the corresponding topic or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course or topic does not exist
    pub async fn patch(&self, params: &CoursesTopicsPatchParams, req: &Topic) -> Result<Topic> {
        let rel_path = format!(
            "v1/courses/{courseId}/topics/{id}",
            courseId = percent_encode(format!("{}", params.course_id).as_bytes(), NON_ALPHANUMERIC),
            id = percent_encode(format!("{}", params.id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomTopics.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "PATCH", opt_request).await
    }
}

/// The Classroom Invitations service represents the Invitations resource.
pub struct InvitationsService {
    client: TlsClient,
    authenticator: Box<dyn 'static + DerefAuth>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl InvitationsService {
    /// Create a new InvitationsService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Arc`: `new(client.clone(), Arc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + DerefAuth>(client: TlsClient, auth: A) -> InvitationsService {
        InvitationsService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://classroom.googleapis.com/".into(),
            root_url: "https://classroom.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of ClassroomScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Accepts an invitation, removing it and adding the invited user to the teachers or students (as appropriate) of the specified course. Only the invited user may accept an invitation. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to accept the requested invitation or for access errors. * `FAILED_PRECONDITION` for the following request errors: * CourseMemberLimitReached * CourseNotModifiable * CourseTeacherLimitReached * UserGroupsMembershipLimitReached * `NOT_FOUND` if no invitation exists with the requested ID.
    pub async fn accept(&self, params: &InvitationsAcceptParams) -> Result<Empty> {
        let rel_path = format!(
            "v1/invitations/{id}:accept",
            id = percent_encode(format!("{}", params.id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomRosters.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }

    /// Creates an invitation. Only one invitation for a user and course may exist at a time. Delete and re-create an invitation to make changes. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to create invitations for this course or for access errors. * `NOT_FOUND` if the course or the user does not exist. * `FAILED_PRECONDITION`: * if the requested user's account is disabled. * if the user already has this role or a role with greater permissions. * for the following request errors: * IneligibleOwner * `ALREADY_EXISTS` if an invitation for the specified user and course already exists.
    pub async fn create(
        &self,
        params: &InvitationsCreateParams,
        req: &Invitation,
    ) -> Result<Invitation> {
        let rel_path = format!("v1/invitations",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomRosters.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }

    /// Deletes an invitation. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to delete the requested invitation or for access errors. * `NOT_FOUND` if no invitation exists with the requested ID.
    pub async fn delete(&self, params: &InvitationsDeleteParams) -> Result<Empty> {
        let rel_path = format!(
            "v1/invitations/{id}",
            id = percent_encode(format!("{}", params.id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomRosters.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "DELETE", opt_request).await
    }

    /// Returns an invitation. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to view the requested invitation or for access errors. * `NOT_FOUND` if no invitation exists with the requested ID.
    pub async fn get(&self, params: &InvitationsGetParams) -> Result<Invitation> {
        let rel_path = format!(
            "v1/invitations/{id}",
            id = percent_encode(format!("{}", params.id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomRostersReadonly
                .as_ref()
                .to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }

    /// Returns a list of invitations that the requesting user is permitted to view, restricted to those that match the list request. *Note:* At least one of `user_id` or `course_id` must be supplied. Both fields can be supplied. This method returns the following error codes: * `PERMISSION_DENIED` for access errors.
    pub async fn list(&self, params: &InvitationsListParams) -> Result<ListInvitationsResponse> {
        let rel_path = format!("v1/invitations",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomRostersReadonly
                .as_ref()
                .to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }
}

/// The Classroom Registrations service represents the Registrations resource.
pub struct RegistrationsService {
    client: TlsClient,
    authenticator: Box<dyn 'static + DerefAuth>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl RegistrationsService {
    /// Create a new RegistrationsService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Arc`: `new(client.clone(), Arc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + DerefAuth>(client: TlsClient, auth: A) -> RegistrationsService {
        RegistrationsService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://classroom.googleapis.com/".into(),
            root_url: "https://classroom.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of ClassroomScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Creates a `Registration`, causing Classroom to start sending notifications from the provided `feed` to the destination provided in `cloudPubSubTopic`. Returns the created `Registration`. Currently, this will be the same as the argument, but with server-assigned fields such as `expiry_time` and `id` filled in. Note that any value specified for the `expiry_time` or `id` fields will be ignored. While Classroom may validate the `cloudPubSubTopic` and return errors on a best effort basis, it is the caller's responsibility to ensure that it exists and that Classroom has permission to publish to it. This method may return the following error codes: * `PERMISSION_DENIED` if: * the authenticated user does not have permission to receive notifications from the requested field; or * the current user has not granted access to the current Cloud project with the appropriate scope for the requested feed. Note that domain-wide delegation of authority is not currently supported for this purpose. If the request has the appropriate scope, but no grant exists, a Request Errors is returned. * another access error is encountered. * `INVALID_ARGUMENT` if: * no `cloudPubsubTopic` is specified, or the specified `cloudPubsubTopic` is not valid; or * no `feed` is specified, or the specified `feed` is not valid. * `NOT_FOUND` if: * the specified `feed` cannot be located, or the requesting user does not have permission to determine whether or not it exists; or * the specified `cloudPubsubTopic` cannot be located, or Classroom has not been granted permission to publish to it.
    pub async fn create(
        &self,
        params: &RegistrationsCreateParams,
        req: &Registration,
    ) -> Result<Registration> {
        let rel_path = format!("v1/registrations",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomPushNotifications
                .as_ref()
                .to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }

    /// Deletes a `Registration`, causing Classroom to stop sending notifications for that `Registration`.
    pub async fn delete(&self, params: &RegistrationsDeleteParams) -> Result<Empty> {
        let rel_path = format!(
            "v1/registrations/{registrationId}",
            registrationId = percent_encode(
                format!("{}", params.registration_id).as_bytes(),
                NON_ALPHANUMERIC
            )
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomPushNotifications
                .as_ref()
                .to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "DELETE", opt_request).await
    }
}

/// The Classroom UserProfiles service represents the UserProfiles resource.
pub struct UserProfilesService {
    client: TlsClient,
    authenticator: Box<dyn 'static + DerefAuth>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl UserProfilesService {
    /// Create a new UserProfilesService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Arc`: `new(client.clone(), Arc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + DerefAuth>(client: TlsClient, auth: A) -> UserProfilesService {
        UserProfilesService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://classroom.googleapis.com/".into(),
            root_url: "https://classroom.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of ClassroomScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Returns a user profile. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access this user profile, if no profile exists with the requested ID, or for access errors.
    pub async fn get(&self, params: &UserProfilesGetParams) -> Result<UserProfile> {
        let rel_path = format!(
            "v1/userProfiles/{userId}",
            userId = percent_encode(format!("{}", params.user_id).as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomRostersReadonly
                .as_ref()
                .to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }
}

/// The Classroom UserProfilesGuardianInvitations service represents the UserProfilesGuardianInvitations resource.
pub struct UserProfilesGuardianInvitationsService {
    client: TlsClient,
    authenticator: Box<dyn 'static + DerefAuth>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl UserProfilesGuardianInvitationsService {
    /// Create a new UserProfilesGuardianInvitationsService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Arc`: `new(client.clone(), Arc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + DerefAuth>(
        client: TlsClient,
        auth: A,
    ) -> UserProfilesGuardianInvitationsService {
        UserProfilesGuardianInvitationsService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://classroom.googleapis.com/".into(),
            root_url: "https://classroom.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of ClassroomScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Creates a guardian invitation, and sends an email to the guardian asking them to confirm that they are the student's guardian. Once the guardian accepts the invitation, their `state` will change to `COMPLETED` and they will start receiving guardian notifications. A `Guardian` resource will also be created to represent the active guardian. The request object must have the `student_id` and `invited_email_address` fields set. Failing to set these fields, or setting any other fields in the request, will result in an error. This method returns the following error codes: * `PERMISSION_DENIED` if the current user does not have permission to manage guardians, if the guardian in question has already rejected too many requests for that student, if guardians are not enabled for the domain in question, or for other access errors. * `RESOURCE_EXHAUSTED` if the student or guardian has exceeded the guardian link limit. * `INVALID_ARGUMENT` if the guardian email address is not valid (for example, if it is too long), or if the format of the student ID provided cannot be recognized (it is not an email address, nor a `user_id` from this API). This error will also be returned if read-only fields are set, or if the `state` field is set to to a value other than `PENDING`. * `NOT_FOUND` if the student ID provided is a valid student ID, but Classroom has no record of that student. * `ALREADY_EXISTS` if there is already a pending guardian invitation for the student and `invited_email_address` provided, or if the provided `invited_email_address` matches the Google account of an existing `Guardian` for this user.
    pub async fn create(
        &self,
        params: &UserProfilesGuardianInvitationsCreateParams,
        req: &GuardianInvitation,
    ) -> Result<GuardianInvitation> {
        let rel_path = format!(
            "v1/userProfiles/{studentId}/guardianInvitations",
            studentId = percent_encode(
                format!("{}", params.student_id).as_bytes(),
                NON_ALPHANUMERIC
            )
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomGuardianlinksStudents
                .as_ref()
                .to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }

    /// Returns a specific guardian invitation. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to view guardian invitations for the student identified by the `student_id`, if guardians are not enabled for the domain in question, or for other access errors. * `INVALID_ARGUMENT` if a `student_id` is specified, but its format cannot be recognized (it is not an email address, nor a `student_id` from the API, nor the literal string `me`). * `NOT_FOUND` if Classroom cannot find any record of the given student or `invitation_id`. May also be returned if the student exists, but the requesting user does not have access to see that student.
    pub async fn get(
        &self,
        params: &UserProfilesGuardianInvitationsGetParams,
    ) -> Result<GuardianInvitation> {
        let rel_path = format!(
            "v1/userProfiles/{studentId}/guardianInvitations/{invitationId}",
            studentId = percent_encode(
                format!("{}", params.student_id).as_bytes(),
                NON_ALPHANUMERIC
            ),
            invitationId = percent_encode(
                format!("{}", params.invitation_id).as_bytes(),
                NON_ALPHANUMERIC
            )
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomGuardianlinksStudentsReadonly
                .as_ref()
                .to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }

    /// Returns a list of guardian invitations that the requesting user is permitted to view, filtered by the parameters provided. This method returns the following error codes: * `PERMISSION_DENIED` if a `student_id` is specified, and the requesting user is not permitted to view guardian invitations for that student, if `"-"` is specified as the `student_id` and the user is not a domain administrator, if guardians are not enabled for the domain in question, or for other access errors. * `INVALID_ARGUMENT` if a `student_id` is specified, but its format cannot be recognized (it is not an email address, nor a `student_id` from the API, nor the literal string `me`). May also be returned if an invalid `page_token` or `state` is provided. * `NOT_FOUND` if a `student_id` is specified, and its format can be recognized, but Classroom has no record of that student.
    pub async fn list(
        &self,
        params: &UserProfilesGuardianInvitationsListParams,
    ) -> Result<ListGuardianInvitationsResponse> {
        let rel_path = format!(
            "v1/userProfiles/{studentId}/guardianInvitations",
            studentId = percent_encode(
                format!("{}", params.student_id).as_bytes(),
                NON_ALPHANUMERIC
            )
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomGuardianlinksStudentsReadonly
                .as_ref()
                .to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }

    /// Modifies a guardian invitation. Currently, the only valid modification is to change the `state` from `PENDING` to `COMPLETE`. This has the effect of withdrawing the invitation. This method returns the following error codes: * `PERMISSION_DENIED` if the current user does not have permission to manage guardians, if guardians are not enabled for the domain in question or for other access errors. * `FAILED_PRECONDITION` if the guardian link is not in the `PENDING` state. * `INVALID_ARGUMENT` if the format of the student ID provided cannot be recognized (it is not an email address, nor a `user_id` from this API), or if the passed `GuardianInvitation` has a `state` other than `COMPLETE`, or if it modifies fields other than `state`. * `NOT_FOUND` if the student ID provided is a valid student ID, but Classroom has no record of that student, or if the `id` field does not refer to a guardian invitation known to Classroom.
    pub async fn patch(
        &self,
        params: &UserProfilesGuardianInvitationsPatchParams,
        req: &GuardianInvitation,
    ) -> Result<GuardianInvitation> {
        let rel_path = format!(
            "v1/userProfiles/{studentId}/guardianInvitations/{invitationId}",
            studentId = percent_encode(
                format!("{}", params.student_id).as_bytes(),
                NON_ALPHANUMERIC
            ),
            invitationId = percent_encode(
                format!("{}", params.invitation_id).as_bytes(),
                NON_ALPHANUMERIC
            )
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomGuardianlinksStudents
                .as_ref()
                .to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "PATCH", opt_request).await
    }
}

/// The Classroom UserProfilesGuardians service represents the UserProfilesGuardians resource.
pub struct UserProfilesGuardiansService {
    client: TlsClient,
    authenticator: Box<dyn 'static + DerefAuth>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl UserProfilesGuardiansService {
    /// Create a new UserProfilesGuardiansService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Arc`: `new(client.clone(), Arc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + DerefAuth>(client: TlsClient, auth: A) -> UserProfilesGuardiansService {
        UserProfilesGuardiansService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://classroom.googleapis.com/".into(),
            root_url: "https://classroom.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of ClassroomScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Deletes a guardian. The guardian will no longer receive guardian notifications and the guardian will no longer be accessible via the API. This method returns the following error codes: * `PERMISSION_DENIED` if no user that matches the provided `student_id` is visible to the requesting user, if the requesting user is not permitted to manage guardians for the student identified by the `student_id`, if guardians are not enabled for the domain in question, or for other access errors. * `INVALID_ARGUMENT` if a `student_id` is specified, but its format cannot be recognized (it is not an email address, nor a `student_id` from the API). * `NOT_FOUND` if the requesting user is permitted to modify guardians for the requested `student_id`, but no `Guardian` record exists for that student with the provided `guardian_id`.
    pub async fn delete(&self, params: &UserProfilesGuardiansDeleteParams) -> Result<Empty> {
        let rel_path = format!(
            "v1/userProfiles/{studentId}/guardians/{guardianId}",
            studentId = percent_encode(
                format!("{}", params.student_id).as_bytes(),
                NON_ALPHANUMERIC
            ),
            guardianId = percent_encode(
                format!("{}", params.guardian_id).as_bytes(),
                NON_ALPHANUMERIC
            )
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomGuardianlinksStudents
                .as_ref()
                .to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "DELETE", opt_request).await
    }

    /// Returns a specific guardian. This method returns the following error codes: * `PERMISSION_DENIED` if no user that matches the provided `student_id` is visible to the requesting user, if the requesting user is not permitted to view guardian information for the student identified by the `student_id`, if guardians are not enabled for the domain in question, or for other access errors. * `INVALID_ARGUMENT` if a `student_id` is specified, but its format cannot be recognized (it is not an email address, nor a `student_id` from the API, nor the literal string `me`). * `NOT_FOUND` if the requesting user is permitted to view guardians for the requested `student_id`, but no `Guardian` record exists for that student that matches the provided `guardian_id`.
    pub async fn get(&self, params: &UserProfilesGuardiansGetParams) -> Result<Guardian> {
        let rel_path = format!(
            "v1/userProfiles/{studentId}/guardians/{guardianId}",
            studentId = percent_encode(
                format!("{}", params.student_id).as_bytes(),
                NON_ALPHANUMERIC
            ),
            guardianId = percent_encode(
                format!("{}", params.guardian_id).as_bytes(),
                NON_ALPHANUMERIC
            )
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomGuardianlinksStudentsReadonly
                .as_ref()
                .to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }

    /// Returns a list of guardians that the requesting user is permitted to view, restricted to those that match the request. To list guardians for any student that the requesting user may view guardians for, use the literal character `-` for the student ID. This method returns the following error codes: * `PERMISSION_DENIED` if a `student_id` is specified, and the requesting user is not permitted to view guardian information for that student, if `"-"` is specified as the `student_id` and the user is not a domain administrator, if guardians are not enabled for the domain in question, if the `invited_email_address` filter is set by a user who is not a domain administrator, or for other access errors. * `INVALID_ARGUMENT` if a `student_id` is specified, but its format cannot be recognized (it is not an email address, nor a `student_id` from the API, nor the literal string `me`). May also be returned if an invalid `page_token` is provided. * `NOT_FOUND` if a `student_id` is specified, and its format can be recognized, but Classroom has no record of that student.
    pub async fn list(
        &self,
        params: &UserProfilesGuardiansListParams,
    ) -> Result<ListGuardiansResponse> {
        let rel_path = format!(
            "v1/userProfiles/{studentId}/guardians",
            studentId = percent_encode(
                format!("{}", params.student_id).as_bytes(),
                NON_ALPHANUMERIC
            )
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[ClassroomScopes::ClassroomGuardianlinksStudentsReadonly
                .as_ref()
                .to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.classroom_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }
}
